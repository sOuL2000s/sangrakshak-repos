
--- START FILE: .gitignore ---

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


--- END FILE: .gitignore ---

--- START FILE: combined.py ---

import os

def combine_files_to_single_file(root_dir, output_filename="combined_project_files.txt"):
    """
    Combines the content of all files in a directory into a single file,
    excluding 'node_modules' directories and 'package-lock.json' files.

    Args:
        root_dir (str): The root directory of the project.
        output_filename (str): The name of the output file.
    """
    combined_content = []
    excluded_dirs = ['node_modules', '.git', '.vscode', '.idea', 'dist', 'build']
    excluded_files = ['package-lock.json', 'yarn.lock', 'bun.lockb', '.env'] # Added .env as it might contain sensitive info

    print(f"Starting to combine files from: {root_dir}")
    print(f"Excluding directories: {excluded_dirs}")
    print(f"Excluding files: {excluded_files}")

    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Modify dirnames in-place to skip excluded directories
        dirnames[:] = [d for d in dirnames if d not in excluded_dirs]

        for filename in filenames:
            if filename in excluded_files:
                print(f"Skipping excluded file: {os.path.join(dirpath, filename)}")
                continue

            file_path = os.path.join(dirpath, filename)
            # Make path relative to root_dir for the header
            relative_file_path = os.path.relpath(file_path, root_dir)

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                combined_content.append(f"\n--- START FILE: {relative_file_path} ---\n\n")
                combined_content.append(content)
                combined_content.append(f"\n\n--- END FILE: {relative_file_path} ---\n")
                print(f"Included file: {relative_file_path}")
            except UnicodeDecodeError:
                print(f"Skipping binary or undecodable file (UnicodeDecodeError): {relative_file_path}")
            except Exception as e:
                print(f"Error reading file {relative_file_path}: {e}")

    output_path = os.path.join(root_dir, output_filename)
    try:
        with open(output_path, 'w', encoding='utf-8') as outfile:
            outfile.write("".join(combined_content))
        print(f"\nSuccessfully combined all files into: {output_path}")
    except Exception as e:
        print(f"Error writing output file {output_path}: {e}")

if __name__ == "__main__":
    # Get the current working directory where the script is run
    # This assumes you run the script from your project's root directory
    project_root = os.getcwd()
    combine_files_to_single_file(project_root)


--- END FILE: combined.py ---

--- START FILE: components.json ---

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

--- END FILE: components.json ---

--- START FILE: eslint.config.js ---

import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"], // This rule set applies to all .ts and .tsx files
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
      // "@typescript-eslint/no-require-imports": "error", // This rule is implicitly "error" from recommended extends
    },
  },
  // --- NEW CONFIGURATION BLOCK TO OVERRIDE FOR TAILWIND CONFIG ---
  {
    files: ["tailwind.config.ts"], // Target only the tailwind.config.ts file
    rules: {
      "@typescript-eslint/no-require-imports": "off", // Turn off the specific rule for this file
    },
  }
  // --- END NEW CONFIGURATION BLOCK ---
);


--- END FILE: eslint.config.js ---

--- START FILE: index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SangrakshakX v2.0 SS - Financial Literacy & Cybersecurity Platform</title>
    <meta name="description" content="Comprehensive financial literacy and cybersecurity protection platform with AI-powered learning, fraud simulation, and threat monitoring." />
    <meta name="keywords" content="financial literacy, cybersecurity, fraud protection, AI advisor, SecureShield, SangrakshaX" />
    <meta name="author" content="AstraGenX Corp" />

    <meta property="og:title" content="SangrakshakX v2.0 SS - Financial Literacy & Cybersecurity Platform" />
    <meta property="og:description" content="Comprehensive financial literacy and cybersecurity protection platform with AI-powered learning, fraud simulation, and threat monitoring." />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://github.com/debarghya17/UI-Elements/blob/main/sangrakshak.png?raw=true" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@astragenx" />
    <meta name="twitter:image" content="https://github.com/debarghya17/UI-Elements/blob/main/sangrakshak.png?raw=true" />
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


--- END FILE: index.html ---

--- START FILE: netlify.toml ---

[build]
  command = "npm run build"
  publish = "build"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200


--- END FILE: netlify.toml ---

--- START FILE: package.json ---

{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@tanstack/react-query": "^5.83.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.6.0",
    "google-translate-api": "^2.3.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.61.1",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.1.9",
    "react-router-dom": "^6.30.1",
    "recharts": "^2.15.4",
    "remark-gfm": "^4.0.1",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.9",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.16.5",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18.3.7",
    "@vitejs/plugin-react-swc": "^3.11.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.32.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^15.15.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.38.0",
    "vite": "^5.4.19"
  }
}


--- END FILE: package.json ---

--- START FILE: postcss.config.js ---

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


--- END FILE: postcss.config.js ---

--- START FILE: README.md ---

# üõ°Ô∏è SangrakshakX 2.0 SS

**SangrakshakX 2.0 SS** is a next-generation Smart Surveillance and Safety system designed for high-risk zones, combining real-time monitoring, sensor fusion, and intelligent alerting. Built with modular IoT architecture and a refined frontend, it empowers users with actionable insights and seamless control.

## üöÄ Core Features

- üé• **Live Surveillance Feed** with motion detection and anomaly tracking
- üåê **ESP32-Based Sensor Grid** for intrusion, gas, and temperature monitoring
- üìä **ML-Powered Threat Analytics** via Streamlit dashboard
- üß≠ **Zone-Wise Control Panel** with responsive UI and real-time status
- üîî **Multi-Channel Alert System** (SMS, email, dashboard)
- üß± **Scalable Architecture** for easy zone/sensor expansion

## üß© Tech Stack

### Frontend  
![React](https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB)
![Vite](https://img.shields.io/badge/Vite-646CFF?style=for-the-badge&logo=vite&logoColor=white)
![TailwindCSS](https://img.shields.io/badge/TailwindCSS-06B6D4?style=for-the-badge&logo=tailwindcss&logoColor=white)
![ShadCN UI](https://img.shields.io/badge/ShadCN_UI-000000?style=for-the-badge&logo=vercel&logoColor=white)

### Backend  
![Node.js](https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=node.js&logoColor=white)
![Express.js](https://img.shields.io/badge/Express.js-000000?style=for-the-badge&logo=express&logoColor=white)
![MQTT](https://img.shields.io/badge/MQTT-FF9800?style=for-the-badge&logo=eclipse-mosquitto&logoColor=white)

### IoT & Firmware  
![ESP32](https://img.shields.io/badge/ESP32-FFDD00?style=for-the-badge&logo=espressif&logoColor=black)
![MicroPython](https://img.shields.io/badge/MicroPython-FFD43B?style=for-the-badge&logo=python&logoColor=black)

### ML & Analytics  
![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white)
![Streamlit](https://img.shields.io/badge/Streamlit-FF4B4B?style=for-the-badge&logo=streamlit&logoColor=white)
![Scikit-learn](https://img.shields.io/badge/Scikit--learn-F7931E?style=for-the-badge&logo=scikit-learn&logoColor=white)

### Database  
![Firebase](https://img.shields.io/badge/Firebase-FFCA28?style=for-the-badge&logo=firebase&logoColor=black)
![MongoDB](https://img.shields.io/badge/MongoDB-47A248?style=for-the-badge&logo=mongodb&logoColor=white)

### Deployment  
![GitHub Actions](https://img.shields.io/badge/GitHub_Actions-2088FF?style=for-the-badge&logo=github-actions&logoColor=white)
![Vercel](https://img.shields.io/badge/Vercel-000000?style=for-the-badge&logo=vercel&logoColor=white)
![Heroku](https://img.shields.io/badge/Heroku-430098?style=for-the-badge&logo=heroku&logoColor=white)

## üìê System Architecture

- **Sensor Nodes**: ESP32 units with modular sensor attachments
- **Gateway**: MQTT broker for real-time data relay
- **Dashboard**: Web interface for zone-wise monitoring and control
- **Alert Engine**: Rule-based + ML-enhanced alerting logic

## üß™ Setup Instructions

1. Clone the repo:
   ```bash
   git clone https://github.com/debarghya17/sangrakshak.git
   ```
2. Install frontend dependencies:
   ```bash
   cd frontend
   npm install
   npm run dev
   ```
3. Configure backend and MQTT settings in `.env`
4. Flash ESP32 with firmware from `/iot/firmware`

## üì∏ Screenshots & Demo

Coming soon:
- Dashboard walkthrough
- Sensor data simulation
- Alert trigger showcase

## üë®‚Äçüíª Contributors

- **Debarghya Bhowmick** ‚Äî Founder, Architect and Lead Developer  
- 

## üìú License

This project is released under a Proprietary License. Redistribution, modification or commercial use is strictly prohibited without prior written consent from the author. All rights reserved ¬© Debarghya Bhowmick.


--- END FILE: README.md ---

--- START FILE: tailwind.config.ts ---

import { Config } from "tailwindcss"; // Verified import syntax

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			fontFamily: {
				'inter': ['Inter', 'sans-serif'],
				'orbitron': ['Orbitron', 'monospace'],
			},
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				glass: {
					DEFAULT: 'hsl(var(--glass))',
					border: 'hsl(var(--glass-border))',
				},
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))',
					glow: 'hsl(var(--primary-glow))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))',
					glow: 'hsl(var(--accent-glow))'
				},
				success: {
					DEFAULT: 'hsl(var(--success))',
					foreground: 'hsl(var(--success-foreground))'
				},
				warning: {
					DEFAULT: 'hsl(var(--warning))',
					foreground: 'hsl(var(--warning-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				}
			},
			backgroundImage: {
				'gradient-primary': 'var(--gradient-primary)',
				'gradient-accent': 'var(--gradient-accent)',
				'gradient-glass': 'var(--gradient-glass)',
				'gradient-hero': 'var(--gradient-hero)',
			},
			boxShadow: {
				'glass': 'var(--shadow-glass)',
				'glow': 'var(--shadow-glow)',
				'accent': 'var(--shadow-accent)',
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'pulse-glow': {
					'0%, 100%': {
						boxShadow: '0 0 20px hsl(var(--primary-glow) / 0.3)'
					},
					'50%': {
						boxShadow: '0 0 40px hsl(var(--primary-glow) / 0.6)'
					}
				},
				'float': {
					'0%, 100%': {
						transform: 'translateY(0px)'
					},
					'50%': {
						transform: 'translateY(-10px)'
					}
				},
				'slide-in': {
					'0%': {
						transform: 'translateX(-100%)',
						opacity: '0'
					},
					'100%': {
						transform: 'translateX(0)',
						opacity: '1'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'pulse-glow': 'pulse-glow 2s ease-in-out infinite',
				'float': 'float 3s ease-in-out infinite',
				'slide-in': 'slide-in 0.3s ease-out'
			},
			typography: ({ theme }: { theme: (path: string) => string }) => ({
				DEFAULT: {
					css: {
						// Ensure all elements wrap by default in base prose
						'p, ol, ul, li, blockquote, pre, code, h1, h2, h3, h4, h5, h6': {
                            wordBreak: 'break-all', // Changed to break-all for stronger wrapping
                        },
                        'pre': {
                            whiteSpace: 'pre-wrap', // This ensures code blocks wrap
                        },
					},
				},
				// This is the important part for dark mode readability (for general dark backgrounds)
				'invert': {
					css: {
						'--tw-prose-body': theme('colors.foreground'), // Main body text
						'--tw-prose-headings': theme('colors.primary'), // H1, H2, etc.
						'--tw-prose-lead': theme('colors.muted-foreground'),
						'--tw-prose-links': theme('colors.accent'), // Links
						'--tw-prose-bold': theme('colors.foreground'), // Bold text
						'--tw-prose-counters': theme('colors.muted-foreground'), // List numbers
						'--tw-prose-bullets': theme('colors.muted-foreground'), // List bullets
						'--tw-prose-hr': theme('colors.border'), // Horizontal rules
						'--tw-prose-quotes': theme('colors.muted-foreground'), // Blockquotes text
						'--tw-prose-quote-borders': theme('colors.border'), // Blockquotes border
						'--tw-prose-captions': theme('colors.muted-foreground'), // Figcaption
						'--tw-prose-code': theme('colors.foreground'), // Inline code text
						'--tw-prose-pre-code': theme('colors.foreground'), // Code block text
						'--tw-prose-pre-bg': theme('colors.secondary'), // Code block background
						'--tw-prose-th-borders': theme('colors.border'), // Table header borders
						'--tw-prose-td-borders': theme('colors.border'), // Table cell borders
						'--tw-prose-figcaption': theme('colors.muted-foreground'),
						'--tw-prose-strong': theme('colors.foreground'), // Explicitly set strong/bold text color

						// Ensure list markers are colored correctly
						'ol > li::before': {
							color: theme('colors.muted-foreground'),
						},
						'ul > li::before': {
							backgroundColor: theme('colors.muted-foreground'),
						},
						// Specific styling for code blocks and inline code
						'pre': {
							color: theme('colors.foreground'),
							backgroundColor: theme('colors.secondary'),
							padding: '0.2em 0.4em',
							borderRadius: '0.25em',
                            wordBreak: 'break-all', // Changed to break-all
                            whiteSpace: 'pre-wrap', // Ensures pre-formatted text wraps
						},
						'code': {
							color: theme('colors.foreground'),
							backgroundColor: theme('colors.secondary'),
							padding: '0.2em 0.4em',
							borderRadius: '0.25em',
                            wordBreak: 'break-all', // Changed to break-all
						},
						'code::before': { content: 'none' }, // Remove default quotes around inline code
						'code::after': { content: 'none' },   // Remove default quotes around inline code
                        'hr': { // Explicitly define HR style to prevent overflow if it's too wide
                            width: '100%',
                            display: 'block',
                            height: '1px',
                            border: '0',
                            borderTop: '1px solid ' + theme('colors.border'),
                            margin: '1em 0',
                            overflow: 'hidden',
                        }
					},
				},
                // Custom prose variant for AI messages (now with primary blue background)
                'ai': {
                    css: {
                        '--tw-prose-body': theme('colors.primary-foreground'), // Main body text - dark
                        '--tw-prose-headings': theme('colors.primary-foreground'), // H1, H2, etc. - dark
                        '--tw-prose-lead': theme('colors.primary-foreground'),
                        '--tw-prose-links': theme('colors.primary-foreground'), // Links - dark
                        '--tw-prose-bold': theme('colors.primary-foreground'), // Bold text - dark
                        '--tw-prose-counters': theme('colors.primary-foreground'), // List numbers - dark
                        '--tw-prose-bullets': theme('colors.primary-foreground'), // List bullets - dark
                        '--tw-prose-hr': theme('colors.primary-foreground'), // Horizontal rules - dark border
                        '--tw-prose-quotes': theme('colors.primary-foreground'), // Blockquotes text - dark
                        '--tw-prose-quote-borders': theme('colors.primary-foreground'), // Blockquotes border - dark
                        '--tw-prose-captions': theme('colors.primary-foreground'), // Figcaption - dark
                        '--tw-prose-code': theme('colors.foreground'), // Inline code text - light (readable on secondary)
                        '--tw-prose-pre-code': theme('colors.foreground'), // Code block text - light (readable on secondary)
                        '--tw-prose-pre-bg': theme('colors.secondary'), // Code block background - dark grey
                        '--tw-prose-th-borders': theme('colors.primary-foreground'), // Table header borders - dark
                        '--tw-prose-td-borders': theme('colors.primary-foreground'), // Table cell borders - dark
                        '--tw-prose-figcaption': theme('colors.primary-foreground'),
                        '--tw-prose-strong': theme('colors.primary-foreground'), // Explicitly set strong/bold text color - dark

                        // Ensure list markers are colored correctly
                        'ol > li::before': {
                            color: theme('colors.primary-foreground'),
                        },
                        'ul > li::before': {
                            backgroundColor: theme('colors.primary-foreground'),
                        },
                        // Specific styling for code blocks and inline code
                        'pre': {
                            color: theme('colors.foreground'),
                            backgroundColor: theme('colors.secondary'),
                            padding: '0.2em 0.4em',
                            borderRadius: '0.25em',
                            wordBreak: 'break-all', // Changed to break-all
                            whiteSpace: 'pre-wrap',
                        },
                        'code': {
                            color: theme('colors.foreground'),
                            backgroundColor: theme('colors.secondary'),
                            padding: '0.2em 0.4em',
                            borderRadius: '0.25em',
                            wordBreak: 'break-all', // Changed to break-all
                        },
                        'code::before': { content: 'none' },
                        'code::after': { content: 'none' },
                        // Ensure general text, headings, links are also explicitly set to dark foreground color
                        'h1, h2, h3, h4, h5, h6, p, ul, ol, li, strong, b, a': {
                            color: theme('colors.primary-foreground'), // All text on primary background is primary-foreground (dark)
                            wordBreak: 'break-all', // Changed to break-all
                        },
                        'hr': {
                            width: '100%',
                            display: 'block',
                            height: '1px',
                            border: '0',
                            borderTop: '1px solid ' + theme('colors.primary-foreground'), // HR dark border
                            margin: '1em 0',
                            overflow: 'hidden',
                        }
                    },
                },
			}),
		}
	},
	plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;


--- END FILE: tailwind.config.ts ---

--- START FILE: tsconfig.app.json ---

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}


--- END FILE: tsconfig.app.json ---

--- START FILE: tsconfig.json ---

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}


--- END FILE: tsconfig.json ---

--- START FILE: tsconfig.node.json ---

{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}


--- END FILE: tsconfig.node.json ---

--- START FILE: vite.config.ts ---

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),

  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));


--- END FILE: vite.config.ts ---

--- START FILE: public\placeholder.svg ---

<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

--- END FILE: public\placeholder.svg ---

--- START FILE: public\robots.txt ---

User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /


--- END FILE: public\robots.txt ---

--- START FILE: public\_redirects ---

/* /index.html 200


--- END FILE: public\_redirects ---

--- START FILE: src\App.css ---

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


--- END FILE: src\App.css ---

--- START FILE: src\App.tsx ---

import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Index from "./pages/Index";
import LearningHub from "./pages/LearningHub";
import SimulationGame from "./pages/SimulationGame";
import AIAdvisor from "./pages/AIAdvisor";
import Calculators from "./pages/Calculators";
import Reports from "./pages/Reports";
import Community from "./pages/Community";
import SafePayments from "./pages/SafePayments";
import SecureShield from "./pages/SecureShield";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Index />} />
          <Route path="/learning" element={<LearningHub />} />
          <Route path="/simulation" element={<SimulationGame />} />
          <Route path="/ai-advisor" element={<AIAdvisor />} />
          <Route path="/calculators" element={<Calculators />} />
          <Route path="/reports" element={<Reports />} />
          <Route path="/community" element={<Community />} />
          <Route path="/payments" element={<SafePayments />} />
          <Route path="/secureshield" element={<SecureShield />} />
          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;


--- END FILE: src\App.tsx ---

--- START FILE: src\index.css ---

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Orbitron:wght@400;500;600;700;800;900&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

/* SangrakshaX Design System - Dark theme with glassmorphism */

@layer base {
  :root {
    /* Dark theme colors */
    --background: 220 30% 5%;
    --foreground: 210 40% 98%;

    --card: 220 25% 8%;
    --card-foreground: 210 40% 98%;
    
    --glass: 220 25% 10%;
    --glass-border: 220 25% 20%;

    --popover: 220 25% 8%;
    --popover-foreground: 210 40% 98%;

    --primary: 200 100% 60%;
    --primary-foreground: 220 30% 5%;
    --primary-glow: 200 100% 70%;

    --secondary: 220 25% 15%;
    --secondary-foreground: 210 40% 98%;

    --muted: 220 25% 12%;
    --muted-foreground: 215 20% 65%;

    --accent: 270 100% 70%;
    --accent-foreground: 220 30% 5%;
    --accent-glow: 270 100% 80%;

    --success: 120 60% 50%;
    --success-foreground: 120 60% 10%;

    --warning: 40 90% 60%;
    --warning-foreground: 40 90% 10%;

    --destructive: 0 75% 60%;
    --destructive-foreground: 0 75% 10%;

    --border: 220 25% 20%;
    --input: 220 25% 15%;
    --ring: 200 100% 60%;

    --radius: 0.75rem;

    /* Sidebar colors */
    --sidebar-background: 220 30% 6%;
    --sidebar-foreground: 210 40% 90%;
    --sidebar-primary: 200 100% 60%;
    --sidebar-primary-foreground: 220 30% 5%;
    --sidebar-accent: 220 25% 12%;
    --sidebar-accent-foreground: 210 40% 90%;
    --sidebar-border: 220 25% 15%;
    --sidebar-ring: 200 100% 60%;

    /* Gradients */
    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));
    --gradient-accent: linear-gradient(135deg, hsl(var(--accent)), hsl(var(--accent-glow)));
    --gradient-glass: linear-gradient(135deg, 
      hsl(var(--glass) / 0.8), 
      hsl(var(--glass) / 0.4));
    --gradient-hero: linear-gradient(135deg, 
      hsl(var(--primary) / 0.9), 
      hsl(var(--accent) / 0.7));

    /* Shadows and effects */
    --shadow-glass: 0 8px 32px hsl(var(--primary) / 0.1);
    --shadow-glow: 0 0 40px hsl(var(--primary-glow) / 0.3);
    --shadow-accent: 0 0 20px hsl(var(--accent-glow) / 0.4);

    /* Animations */
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-bounce: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-inter;
    font-family: 'Inter', sans-serif;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Orbitron', sans-serif;
  }
}

@layer components {
  /* Glassmorphism effects */
  .glass-card {
    @apply backdrop-blur-xl bg-gradient-to-br from-glass/80 to-glass/40;
    @apply border border-glass-border/30 rounded-xl;
    box-shadow: var(--shadow-glass);
  }

  .glass-navbar {
    @apply backdrop-blur-xl bg-gradient-to-r from-glass/90 to-glass/70;
    @apply border-b border-glass-border/30;
    box-shadow: 0 4px 30px hsl(var(--primary) / 0.1);
  }

  .glass-sidebar {
    @apply backdrop-blur-xl border-r border-sidebar-border/30;
    background: linear-gradient(180deg, 
      hsl(var(--sidebar-background) / 0.95), 
      hsl(var(--sidebar-background) / 0.85));
  }

  /* Button variants */
  .btn-glass {
    @apply bg-gradient-to-r from-glass/60 to-glass/40;
    @apply border border-glass-border/40 backdrop-blur-sm;
    @apply hover:from-primary/20 hover:to-primary/10;
    @apply transition-all duration-300;
  }

  .btn-glow {
    @apply bg-gradient-to-r from-primary to-primary-glow;
    @apply shadow-glow hover:shadow-accent;
    @apply transition-all duration-300 transform hover:scale-105;
  }

  /* Text effects */
  .text-glow {
    text-shadow: 0 0 20px hsl(var(--primary-glow) / 0.5);
  }

  .text-gradient {
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Hover animations */
  .hover-lift {
    @apply transition-transform duration-300 hover:-translate-y-1;
  }

  .hover-glow {
    @apply transition-all duration-300;
  }

  .hover-glow:hover {
    box-shadow: var(--shadow-glow);
  }

  /* Professional scrollbar styling */
  * {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--primary) / 0.6) hsl(var(--background));
  }

  *::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  *::-webkit-scrollbar-track {
    background: hsl(var(--background));
    border-radius: 4px;
  }

  *::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, 
      hsl(var(--primary) / 0.6), 
      hsl(var(--accent) / 0.4));
    border-radius: 4px;
    border: 1px solid hsl(var(--background));
  }

  *::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, 
      hsl(var(--primary) / 0.8), 
      hsl(var(--accent) / 0.6));
  }

  *::-webkit-scrollbar-corner {
    background: hsl(var(--background));
  }
}

--- END FILE: src\index.css ---

--- START FILE: src\main.tsx ---

import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);


--- END FILE: src\main.tsx ---

--- START FILE: src\vite-env.d.ts ---

/// <reference types="vite/client" />


--- END FILE: src\vite-env.d.ts ---

--- START FILE: src\components\dashboard\ProgressOverview.tsx ---

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { TrendingUp, Target, Award, Clock } from "lucide-react";

const progressData = [
  {
    title: "Financial Literacy",
    progress: 75,
    level: "Advanced",
    color: "primary",
    icon: TrendingUp
  },
  {
    title: "Fraud Awareness",
    progress: 60,
    level: "Intermediate", 
    color: "accent",
    icon: Target
  },
  {
    title: "Cybersecurity Knowledge",
    progress: 45,
    level: "Beginner",
    color: "success",
    icon: Award
  },
  {
    title: "Safe Habits",
    progress: 85,
    level: "Expert",
    color: "warning",
    icon: Clock
  }
];

export const ProgressOverview = () => {
  return (
    <Card className="glass-card">
      <CardHeader>
        <CardTitle className="font-orbitron text-xl flex items-center gap-2">
          <TrendingUp className="h-5 w-5 text-primary" />
          Your Progress
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {progressData.map((item) => (
          <div key={item.title} className="space-y-2">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <item.icon className="h-4 w-4 text-primary" />
                <span className="font-medium">{item.title}</span>
              </div>
              <Badge variant="secondary" className="text-xs">
                {item.level}
              </Badge>
            </div>
            <div className="space-y-1">
              <Progress value={item.progress} className="h-2" />
              <p className="text-xs text-muted-foreground text-right">
                {item.progress}% Complete
              </p>
            </div>
          </div>
        ))}
      </CardContent>
    </Card>
  );
};

--- END FILE: src\components\dashboard\ProgressOverview.tsx ---

--- START FILE: src\components\dashboard\QuickActions.tsx ---

import { 
  Calculator, 
  Bot, 
  Gamepad2, 
  BookOpen, 
  Shield, 
  CreditCard 
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { NavLink } from "react-router-dom";

const quickActions = [
  {
    title: "EMI Calculator",
    description: "Calculate loan EMIs",
    icon: Calculator,
    href: "/calculators",
    color: "primary"
  },
  {
    title: "AI Advisor",
    description: "Get personalized tips",
    icon: Bot,
    href: "/ai-advisor",
    color: "accent"
  },
  {
    title: "Play Game",
    description: "Learn through simulation",
    icon: Gamepad2,
    href: "/simulation",
    color: "success"
  },
  {
    title: "Learn Finance",
    description: "Educational resources",
    icon: BookOpen,
    href: "/learning",
    color: "warning"
  },
  {
    title: "SecureShield",
    description: "Protect your website",
    icon: Shield,
    href: "/secureshield",
    color: "destructive"
  },
  {
    title: "Safe Payments",
    description: "Secure transactions",
    icon: CreditCard,
    href: "/payments",
    color: "primary"
  }
];

export const QuickActions = () => {
  return (
    <Card className="glass-card">
      <CardHeader>
        <CardTitle className="font-orbitron text-xl">Quick Actions</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {quickActions.map((action) => (
            <NavLink key={action.href} to={action.href}>
              <Button
                variant="ghost"
                className="h-auto p-4 flex flex-col items-center gap-2 hover:bg-primary/10 transition-all duration-300 group"
              >
                <div className="h-12 w-12 bg-gradient-to-br from-primary/20 to-accent/20 rounded-lg flex items-center justify-center group-hover:shadow-glow transition-all duration-300">
                  <action.icon className="h-6 w-6 text-primary" />
                </div>
                <div className="text-center">
                  <p className="font-semibold text-sm">{action.title}</p>
                  <p className="text-xs text-muted-foreground">{action.description}</p>
                </div>
              </Button>
            </NavLink>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

--- END FILE: src\components\dashboard\QuickActions.tsx ---

--- START FILE: src\components\dashboard\StatsCard.tsx ---

import { LucideIcon } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  title: string;
  value: string | number;
  change?: string;
  trend?: "up" | "down" | "neutral";
  icon: LucideIcon;
  className?: string;
}

export const StatsCard = ({ 
  title, 
  value, 
  change, 
  trend = "neutral", 
  icon: Icon, 
  className 
}: StatsCardProps) => {
  return (
    <Card className={cn("glass-card hover-lift hover-glow", className)}>
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div className="space-y-2">
            <p className="text-sm font-medium text-muted-foreground">
              {title}
            </p>
            <p className="text-2xl font-bold font-orbitron text-foreground">
              {value}
            </p>
            {change && (
              <p className={cn(
                "text-xs font-medium",
                trend === "up" && "text-success",
                trend === "down" && "text-destructive",
                trend === "neutral" && "text-muted-foreground"
              )}>
                {change}
              </p>
            )}
          </div>
          <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center shadow-glow">
            <Icon className="h-6 w-6 text-primary-foreground" />
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

--- END FILE: src\components\dashboard\StatsCard.tsx ---

--- START FILE: src\components\dashboard\ThreatAlerts.tsx ---

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { AlertTriangle, Shield, Eye, CheckCircle } from "lucide-react";

const threats = [
  {
    id: 1,
    type: "Phishing Attempt",
    severity: "high",
    description: "Suspicious email detected from unknown sender",
    time: "5 minutes ago",
    status: "blocked"
  },
  {
    id: 2,
    type: "Malware Scan",
    severity: "medium",
    description: "Potentially unwanted program found",
    time: "1 hour ago", 
    status: "quarantined"
  },
  {
    id: 3,
    type: "Network Intrusion",
    severity: "low",
    description: "Unusual traffic pattern detected",
    time: "3 hours ago",
    status: "monitoring"
  }
];

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case "high":
      return "text-destructive";
    case "medium": 
      return "text-warning";
    case "low":
      return "text-success";
    default:
      return "text-muted-foreground";
  }
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case "blocked":
      return <Shield className="h-4 w-4 text-destructive" />;
    case "quarantined":
      return <AlertTriangle className="h-4 w-4 text-warning" />;
    case "monitoring":
      return <Eye className="h-4 w-4 text-success" />;
    default:
      return <CheckCircle className="h-4 w-4 text-muted-foreground" />;
  }
};

export const ThreatAlerts = () => {
  return (
    <Card className="glass-card">
      <CardHeader>
        <CardTitle className="font-orbitron text-xl flex items-center gap-2">
          <AlertTriangle className="h-5 w-5 text-warning" />
          Security Alerts
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {threats.map((threat) => (
          <div key={threat.id} className="flex items-start gap-3 p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors">
            <div className="mt-1">
              {getStatusIcon(threat.status)}
            </div>
            <div className="flex-1 space-y-1">
              <div className="flex items-center gap-2">
                <span className="font-medium text-sm">{threat.type}</span>
                <Badge 
                  variant="outline" 
                  className={`text-xs ${getSeverityColor(threat.severity)}`}
                >
                  {threat.severity}
                </Badge>
              </div>
              <p className="text-xs text-muted-foreground">
                {threat.description}
              </p>
              <p className="text-xs text-muted-foreground">
                {threat.time}
              </p>
            </div>
            <Button variant="ghost" size="sm" className="opacity-70 hover:opacity-100">
              View
            </Button>
          </div>
        ))}
        
        <Button variant="outline" className="w-full mt-4 btn-glass">
          View All Alerts
        </Button>
      </CardContent>
    </Card>
  );
};

--- END FILE: src\components\dashboard\ThreatAlerts.tsx ---

--- START FILE: src\components\layout\Layout.tsx ---

import { useState } from "react";
import { Navbar } from "./Navbar";
import { Sidebar } from "./Sidebar";

interface LayoutProps {
  children: React.ReactNode;
}

export const Layout = ({ children }: LayoutProps) => {
  const [sidebarOpen, setSidebarOpen] = useState(true);

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  return (
    <div className="min-h-screen bg-background">
      <Navbar onToggleSidebar={toggleSidebar} sidebarOpen={sidebarOpen} />
      <Sidebar isOpen={sidebarOpen} />
      
      {/* Main Content */}
      <main 
        className={`pt-16 transition-all duration-300 ${
          sidebarOpen ? "ml-64" : "ml-16"
        }`}
      >
        <div className="p-6">
          {children}
        </div>
      </main>
    </div>
  );
};

--- END FILE: src\components\layout\Layout.tsx ---

--- START FILE: src\components\layout\Navbar.tsx ---

import { useState } from "react";
import { Menu, User, LogIn, UserPlus } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface NavbarProps {
  onToggleSidebar: () => void;
  sidebarOpen: boolean;
}

export const Navbar = ({ onToggleSidebar }: NavbarProps) => {
  const [isLoggedIn] = useState(false); // This will be managed by auth context later

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 glass-navbar h-16">
      <div className="flex items-center justify-between h-full px-4">
        {/* Left section - Hamburger + Logo & Branding */}
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={onToggleSidebar}
            className="p-2 hover:bg-primary/10 transition-all duration-300"
          >
            <Menu className="h-6 w-6 text-primary" />
          </Button>

          <div className="flex items-center space-x-3">
            <img 
              src="https://github.com/debarghya17/UI-Elements/blob/main/sangrakshak.png?raw=true"
              alt="SangrakshaX Logo"
              className="w-10 h-10 object-contain"
            />
            <div className="flex flex-col">
              <h1 className="font-orbitron text-xl font-bold text-gradient">
                SangrakshakX
              </h1>
              <p className="text-xs text-muted-foreground font-inter italic">
                From the Family of AstraGenX Corp.
              </p>
            </div>
          </div>
        </div>

        {/* Right section - Profile */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="sm" className="p-2 hover:bg-primary/10">
              <User className="h-6 w-6 text-foreground" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent 
            align="end" 
            className="glass-card border-glass-border/50 bg-glass/95 backdrop-blur-xl"
          >
            {isLoggedIn ? (
              <>
                <DropdownMenuItem className="hover:bg-primary/10">
                  <User className="mr-2 h-4 w-4" />
                  Profile
                </DropdownMenuItem>
                <DropdownMenuItem className="hover:bg-primary/10">
                  Settings
                </DropdownMenuItem>
                <DropdownMenuItem className="hover:bg-destructive/10 text-destructive">
                  Logout
                </DropdownMenuItem>
              </>
            ) : (
              <>
                <DropdownMenuItem className="hover:bg-primary/10">
                  <LogIn className="mr-2 h-4 w-4" />
                  Sign In
                </DropdownMenuItem>
                <DropdownMenuItem className="hover:bg-primary/10">
                  <UserPlus className="mr-2 h-4 w-4" />
                  Sign Up
                </DropdownMenuItem>
              </>
            )}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </nav>
  );
};

--- END FILE: src\components\layout\Navbar.tsx ---

--- START FILE: src\components\layout\Sidebar.tsx ---

import { useState } from "react";
import { NavLink, useLocation } from "react-router-dom";
import {
  Home,
  BookOpen,
  Gamepad2,
  Bot,
  Calculator,
  BarChart3,
  Users,
  CreditCard,
  Shield,
  Activity,
  Settings,
  HelpCircle,
  Info,
  ChevronRight,
  TrendingUp,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";

interface SidebarProps {
  isOpen: boolean;
  className?: string;
}

const mainMenuItems = [
  { title: "Dashboard", url: "/", icon: Home },
  { title: "Learning Hub", url: "/learning", icon: BookOpen },
  { title: "Simulation Game", url: "/simulation", icon: Gamepad2 },
  { title: "AI Advisor", url: "/ai-advisor", icon: Bot },
  { title: "Calculators", url: "/calculators", icon: Calculator },
  { title: "Reports", url: "/reports", icon: BarChart3 },
  { title: "Community", url: "/community", icon: Users },
  { title: "Safe Payments Lab", url: "/payments", icon: CreditCard },
];

const securityItems = [
  { title: "SecureShield", url: "/secureshield", icon: Shield },
  { title: "Threat Monitoring", url: "/monitoring", icon: Activity },
];

const otherItems = [
  { title: "Settings", url: "/settings", icon: Settings },
  { title: "Help", url: "/help", icon: HelpCircle },
  { title: "About", url: "/about", icon: Info },
];

export const Sidebar = ({ isOpen, className }: SidebarProps) => {
  const location = useLocation();
  const currentPath = location.pathname;

  const isActive = (path: string) => currentPath === path;

  const SidebarItem = ({ item, isCompact = false }: { item: any; isCompact?: boolean }) => (
    <NavLink 
      to={item.url} 
      className="block"
      onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
    >
      <Button
        variant="ghost"
        className={cn(
          "w-full justify-start gap-3 h-12 transition-all duration-300 group relative overflow-hidden",
          "hover:bg-sidebar-accent/50 hover:shadow-lg hover:border-primary/30",
          "before:absolute before:inset-0 before:bg-gradient-to-r before:from-primary/10 before:to-accent/10",
          "before:translate-x-[-100%] before:transition-transform before:duration-300",
          "hover:before:translate-x-0",
          isActive(item.url) && "bg-sidebar-accent text-sidebar-primary shadow-lg border border-primary/30",
          isActive(item.url) && "before:translate-x-0",
          isCompact && "px-3 justify-center"
        )}
      >
        <item.icon className={cn(
          "h-5 w-5 transition-all duration-300 relative z-10",
          "group-hover:scale-110 group-hover:text-primary",
          isActive(item.url) && "text-sidebar-primary scale-110"
        )} />
        {!isCompact && (
          <span className={cn(
            "font-medium transition-all duration-300 relative z-10",
            "group-hover:text-primary",
            isActive(item.url) && "text-sidebar-primary"
          )}>
            {item.title}
          </span>
        )}
        {!isCompact && isActive(item.url) && (
          <ChevronRight className="h-4 w-4 ml-auto text-sidebar-primary relative z-10 animate-pulse" />
        )}
      </Button>
    </NavLink>
  );

  return (
    <aside
      className={cn(
        "fixed left-0 top-16 bottom-0 z-40 glass-sidebar transition-all duration-300",
        isOpen ? "w-64" : "w-16",
        "border-r border-sidebar-border/30",
        className
      )}
    >
      <ScrollArea className="h-full py-4">
        <div className="px-3 space-y-4">
          {/* Main Navigation */}
          <div className="space-y-1">
            {!isOpen && <div className="h-6" />}
            {isOpen && (
              <h3 className="px-3 text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider">
                Main
              </h3>
            )}
            {mainMenuItems.map((item) => (
              <SidebarItem key={item.url} item={item} isCompact={!isOpen} />
            ))}
          </div>

          <Separator className="bg-sidebar-border/30" />

          {/* Security Section */}
          <div className="space-y-1">
            {isOpen && (
              <h3 className="px-3 text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider flex items-center gap-2">
                <Shield className="h-3 w-3" />
                Security
              </h3>
            )}
            {securityItems.map((item) => (
              <SidebarItem key={item.url} item={item} isCompact={!isOpen} />
            ))}
          </div>

          <Separator className="bg-sidebar-border/30" />

          {/* Other Items */}
          <div className="space-y-1">
            {isOpen && (
              <h3 className="px-3 text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider">
                Other
              </h3>
            )}
            {otherItems.map((item) => (
              <SidebarItem key={item.url} item={item} isCompact={!isOpen} />
            ))}
          </div>

          {/* Upgrade Section */}
          {isOpen && (
            <div className="mt-8 px-3">
              <div className="glass-card p-4 border-primary/20">
                <div className="flex items-center gap-2 mb-2">
                  <TrendingUp className="h-4 w-4 text-primary" />
                  <span className="text-sm font-semibold text-primary">Upgrade</span>
                </div>
                <p className="text-xs text-muted-foreground mb-3">
                  Unlock advanced features and protect more endpoints.
                </p>
                <Button size="sm" className="w-full btn-glow">
                  Go Premium
                </Button>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>
    </aside>
  );
};


--- END FILE: src\components\layout\Sidebar.tsx ---

--- START FILE: src\components\simulation\CryptoScamSim.tsx ---

import { useState } from "react";
import { VirtualPhone, SimulationResult } from "./VirtualPhone";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Bitcoin, 
  AlertTriangle, 
  Shield,
  TrendingUp,
  DollarSign,
  Users,
  CheckCircle,
  X,
  ExternalLink,
  Award
} from "lucide-react";

interface CryptoScamSimProps {
  onClose: () => void;
}

const cryptoScenarios = [
  {
    id: 1,
    type: "ponzi-scheme",
    title: "High-Yield Investment Program",
    offer: {
      platform: "CryptoGains Pro",
      promise: "Guaranteed 50% returns in 30 days",
      testimonials: "1000+ satisfied investors",
      minimumInvestment: "$500",
      features: ["AI-powered trading", "Risk-free guarantee", "Daily payouts"]
    },
    isScam: true,
    redFlags: ["Guaranteed high returns", "No risk claims", "Pressure to invest quickly", "Unlicensed platform"],
    explanation: "Ponzi schemes promise unrealistic returns and pay early investors with new investor money."
  },
  {
    id: 2,
    type: "fake-exchange",
    title: "New Crypto Exchange",
    platform: {
      name: "CoinTradeX",
      claims: "Lowest fees in the market - 0% trading fees!",
      promotion: "Limited time: Deposit $1000, get $200 bonus",
      website: "cointradex.net (looks professional)",
      regulation: "Claims to be 'fully regulated' with no specific licenses"
    },
    isScam: true,
    redFlags: ["No proper licensing", "Too good to be true fees", "Large deposit bonuses", "New unverified platform"],
    explanation: "Fake exchanges steal your crypto deposits. Always verify licensing and reputation."
  },
  {
    id: 3,
    type: "pump-and-dump",
    title: "Hot Crypto Tip",
    scenario: "You receive this message in a Telegram group:",
    message: "üöÄüöÄüöÄ URGENT: ShitCoin (SHIT) is about to EXPLODE! My insider source says major announcement tomorrow. Buy NOW before it goes 100x! This is not financial advice üòâ But I'm putting my life savings in it! üíéüôå",
    groupInfo: "5000 members, multiple similar messages",
    isScam: true,
    redFlags: ["Pump and dump language", "Insider trading claims", "Pressure to buy immediately", "Unverified coin"],
    explanation: "Pump and dump schemes artificially inflate coin prices before selling, leaving buyers with worthless coins."
  },
  {
    id: 4,
    type: "legitimate-platform",
    title: "Established Exchange",
    platform: {
      name: "Coinbase",
      features: ["SEC regulated", "Insurance coverage", "Transparent fees", "Strong security record"],
      verification: "Publicly traded company",
      education: "Provides educational resources"
    },
    isScam: false,
    positiveFlags: ["Regulated by authorities", "Transparent operations", "Good security track record", "Educational resources"],
    explanation: "Legitimate exchanges are regulated, transparent about fees, and have good security practices."
  },
  {
    id: 5,
    type: "celebrity-scam",
    title: "Celebrity Crypto Giveaway",
    post: {
      account: "Appears to be from Elon Musk",
      content: "I'm giving away 1000 BTC to celebrate Tesla's success! Send 0.1 BTC to this address and I'll send back 2 BTC within 24 hours. Limited time offer!",
      address: "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      engagement: "Thousands of likes and retweets"
    },
    isScam: true,
    redFlags: ["Fake celebrity account", "Send crypto to receive more", "Too good to be true", "Fake engagement"],
    explanation: "Celebrity crypto giveaway scams are always fake. No legitimate person asks you to send crypto first."
  }
];

export const CryptoScamSim = ({ onClose }: CryptoScamSimProps) => {
  const [currentScenarioIndex, setCurrentScenarioIndex] = useState(0);
  const [answers, setAnswers] = useState<boolean[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<boolean | null>(null);
  const [waitingForContinue, setWaitingForContinue] = useState(false);

  const currentScenario = cryptoScenarios[currentScenarioIndex];
  const isLastScenario = currentScenarioIndex === cryptoScenarios.length - 1;

  const handleAnswer = (answer: boolean) => {
    setSelectedAnswer(answer);
    setShowFeedback(true);
    setWaitingForContinue(true);
  };

  const handleContinue = () => {
    const isCorrect = selectedAnswer === currentScenario.isScam;
    const newAnswers = [...answers, isCorrect];
    setAnswers(newAnswers);
    
    if (isLastScenario) {
      setShowResult(true);
    } else {
      setCurrentScenarioIndex(currentScenarioIndex + 1);
      setShowFeedback(false);
      setSelectedAnswer(null);
      setWaitingForContinue(false);
    }
  };

  const calculateScore = () => {
    const correct = answers.filter(Boolean).length;
    return Math.round((correct / cryptoScenarios.length) * 100);
  };

  const restart = () => {
    setCurrentScenarioIndex(0);
    setAnswers([]);
    setShowResult(false);
    setShowFeedback(false);
    setSelectedAnswer(null);
    setWaitingForContinue(false);
  };

  if (showResult) {
    const correct = answers.filter(Boolean).length;
    return (
      <VirtualPhone onClose={onClose} title="Crypto Scam Detection">
        <SimulationResult 
          score={calculateScore()}
          correct={correct}
          total={cryptoScenarios.length}
          onRestart={restart}
        />
      </VirtualPhone>
    );
  }

  return (
    <VirtualPhone onClose={onClose} title="Crypto Scam Detection">
      <div className="p-4 space-y-4">
        {/* Progress */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">
            Scenario {currentScenarioIndex + 1} of {cryptoScenarios.length}
          </span>
          <div className="flex gap-1">
            {cryptoScenarios.map((_, index) => (
              <div 
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index < currentScenarioIndex ? 'bg-success' :
                  index === currentScenarioIndex ? 'bg-primary' : 'bg-muted'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Scenario Content */}
        <Card className="p-4 space-y-4">
          <div className="flex items-center gap-2">
            <Bitcoin className="h-5 w-5 text-orange-500" />
            <h3 className="font-semibold">{currentScenario.title}</h3>
          </div>

          {currentScenario.type === "ponzi-scheme" && (
            <div className="space-y-3">
              <div className="bg-gradient-to-r from-orange-50 to-yellow-50 dark:from-orange-950 dark:to-yellow-950 p-4 rounded border-2 border-orange-200">
                <h4 className="font-bold text-orange-700 dark:text-orange-300">{currentScenario.offer?.platform}</h4>
                <div className="mt-2 space-y-2">
                  <p className="text-sm"><strong>Promise:</strong> {currentScenario.offer?.promise}</p>
                  <p className="text-sm"><strong>Testimonials:</strong> {currentScenario.offer?.testimonials}</p>
                  <p className="text-sm"><strong>Minimum Investment:</strong> {currentScenario.offer?.minimumInvestment}</p>
                </div>
                <div className="mt-3">
                  <p className="text-sm font-semibold">Features:</p>
                  <ul className="text-sm space-y-1">
                    {currentScenario.offer?.features?.map((feature, index) => (
                      <li key={index} className="flex items-center gap-2">
                        <TrendingUp className="h-3 w-3 text-green-500" />
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>
                <Button className="w-full mt-3 bg-orange-600 hover:bg-orange-700">
                  Invest Now - Limited Time!
                </Button>
              </div>
            </div>
          )}

          {currentScenario.type === "fake-exchange" && (
            <div className="space-y-3">
              <div className="bg-blue-50 dark:bg-blue-950 p-4 rounded border border-blue-200">
                <h4 className="font-bold text-blue-700 dark:text-blue-300">{currentScenario.platform?.name}</h4>
                <div className="mt-2 space-y-2">
                  <p className="text-sm">{currentScenario.platform?.claims}</p>
                  <div className="bg-yellow-100 dark:bg-yellow-900 p-2 rounded">
                    <p className="text-sm font-semibold text-yellow-700 dark:text-yellow-300">
                      {currentScenario.platform?.promotion}
                    </p>
                  </div>
                  <p className="text-xs text-muted-foreground">{currentScenario.platform?.website}</p>
                  <p className="text-xs text-muted-foreground">{currentScenario.platform?.regulation}</p>
                </div>
                <Button className="w-full mt-3">
                  Sign Up & Claim Bonus
                </Button>
              </div>
            </div>
          )}

          {currentScenario.type === "pump-and-dump" && (
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground">{currentScenario.scenario}</p>
              <div className="bg-green-50 dark:bg-green-950 p-3 rounded border-l-4 border-green-500">
                <p className="text-sm italic">{currentScenario.message}</p>
              </div>
              <div className="flex items-center gap-2">
                <Users className="h-4 w-4 text-muted-foreground" />
                <span className="text-xs text-muted-foreground">{currentScenario.groupInfo}</span>
              </div>
            </div>
          )}

          {currentScenario.type === "legitimate-platform" && (
            <div className="space-y-3">
              <div className="bg-green-50 dark:bg-green-950 p-4 rounded border border-green-200">
                <h4 className="font-bold text-green-700 dark:text-green-300 flex items-center gap-2">
                  <Shield className="h-4 w-4" />
                  {currentScenario.platform?.name}
                </h4>
                <div className="mt-3 space-y-2">
                  <p className="text-sm font-semibold">Security Features:</p>
                  <ul className="text-sm space-y-1">
                    {currentScenario.platform?.features?.map((feature, index) => (
                      <li key={index} className="flex items-center gap-2">
                        <CheckCircle className="h-3 w-3 text-green-500" />
                        {feature}
                      </li>
                    ))}
                  </ul>
                  <p className="text-sm"><strong>Status:</strong> {currentScenario.platform?.verification}</p>
                  <p className="text-sm">{currentScenario.platform?.education}</p>
                </div>
              </div>
            </div>
          )}

          {currentScenario.type === "celebrity-scam" && (
            <div className="space-y-3">
              <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded border">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                    <Award className="h-4 w-4 text-white" />
                  </div>
                  <span className="font-semibold">{currentScenario.post?.account}</span>
                </div>
                <p className="text-sm mb-3">{currentScenario.post?.content}</p>
                <div className="bg-gray-100 dark:bg-gray-800 p-2 rounded font-mono text-xs break-all">
                  {currentScenario.post?.address}
                </div>
                <p className="text-xs text-muted-foreground mt-2">{currentScenario.post?.engagement}</p>
                <Button className="w-full mt-3 bg-blue-600">
                  <ExternalLink className="h-4 w-4 mr-2" />
                  Send Bitcoin Now
                </Button>
              </div>
            </div>
          )}
        </Card>

        {/* Question */}
        <Card className="p-4">
          <h3 className="font-semibold mb-3">Is this a cryptocurrency scam?</h3>
          <div className="space-y-3">
            <Button 
              onClick={() => handleAnswer(true)}
              variant={selectedAnswer === true ? "destructive" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <AlertTriangle className="h-4 w-4 mr-2" />
              Yes, this is a scam
            </Button>
            <Button 
              onClick={() => handleAnswer(false)}
              variant={selectedAnswer === false ? "default" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <Shield className="h-4 w-4 mr-2" />
              No, this is legitimate
            </Button>
          </div>
        </Card>

        {/* Feedback */}
        {showFeedback && (
          <Card className={`p-4 border-2 ${
            selectedAnswer === currentScenario.isScam ? 'border-success' : 'border-destructive'
          }`}>
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                {selectedAnswer === currentScenario.isScam ? (
                  <>
                    <CheckCircle className="h-5 w-5 text-success" />
                    <span className="font-semibold text-success">Correct!</span>
                  </>
                ) : (
                  <>
                    <X className="h-5 w-5 text-destructive" />
                    <span className="font-semibold text-destructive">Incorrect</span>
                  </>
                )}
              </div>

              <p className="text-sm">{currentScenario.explanation}</p>

              {currentScenario.isScam && currentScenario.redFlags && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Red flags:</p>
                  <div className="space-y-1">
                    {currentScenario.redFlags.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <AlertTriangle className="h-3 w-3 text-destructive mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {!currentScenario.isScam && currentScenario.positiveFlags && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Positive indicators:</p>
                  <div className="space-y-1">
                    {currentScenario.positiveFlags.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <CheckCircle className="h-3 w-3 text-success mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {waitingForContinue && (
                <Button onClick={handleContinue} className="w-full mt-4">
                  {isLastScenario ? "View Results" : "Continue"}
                </Button>
              )}
            </div>
          </Card>
        )}
      </div>
    </VirtualPhone>
  );
};

--- END FILE: src\components\simulation\CryptoScamSim.tsx ---

--- START FILE: src\components\simulation\EmailPhishingGame.tsx ---

import { useState } from "react";
import { VirtualPhone, SimulationResult } from "./VirtualPhone";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Mail, 
  AlertTriangle, 
  Shield,
  ExternalLink,
  Download,
  Calendar,
  Clock
} from "lucide-react";

interface EmailPhishingGameProps {
  onClose: () => void;
}

const phishingEmails = [
  {
    id: 1,
    from: "security@amazone.com",
    subject: "URGENT: Account Suspended - Verify Now!",
    body: "Your account has been suspended due to suspicious activity. Click here to verify immediately or your account will be permanently deleted within 24 hours.",
    isPhishing: true,
    redFlags: ["Suspicious domain (amazone.com vs amazon.com)", "Urgent language", "Threat of account deletion"],
    time: "2 min ago"
  },
  {
    id: 2,
    from: "notifications@yourbank.com",
    subject: "Monthly Statement Available",
    body: "Your monthly bank statement for March 2024 is now available in your online banking portal. Please log in to view your statement.",
    isPhishing: false,
    time: "1 hour ago"
  },
  {
    id: 3,
    from: "winner@lottery-prize.net",
    subject: "üéâ You've Won $50,000! Claim Now!",
    body: "Congratulations! You have been selected as our weekly lottery winner. To claim your prize, please provide your bank details and pay the processing fee of $500.",
    isPhishing: true,
    redFlags: ["Unknown sender", "Too good to be true", "Requests bank details", "Upfront fee required"],
    time: "3 hours ago"
  },
  {
    id: 4,
    from: "team@github.com",
    subject: "Security alert: New sign-in to your account",
    body: "A new sign-in to your GitHub account was detected from Chrome on Windows. If this was you, you can safely ignore this email.",
    isPhishing: false,
    time: "5 hours ago"
  }
];

export const EmailPhishingGame = ({ onClose }: EmailPhishingGameProps) => {
  const [currentEmailIndex, setCurrentEmailIndex] = useState(0);
  const [answers, setAnswers] = useState<boolean[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<boolean | null>(null);
  const [waitingForContinue, setWaitingForContinue] = useState(false);

  const currentEmail = phishingEmails[currentEmailIndex];
  const isLastEmail = currentEmailIndex === phishingEmails.length - 1;

  const handleAnswer = (answer: boolean) => {
    setSelectedAnswer(answer);
    setShowFeedback(true);
    setWaitingForContinue(true);
  };

  const handleContinue = () => {
    const newAnswers = [...answers, selectedAnswer === currentEmail.isPhishing];
    setAnswers(newAnswers);
    
    if (isLastEmail) {
      setShowResult(true);
    } else {
      setCurrentEmailIndex(currentEmailIndex + 1);
      setShowFeedback(false);
      setSelectedAnswer(null);
      setWaitingForContinue(false);
    }
  };

  const calculateScore = () => {
    const correct = answers.filter(Boolean).length;
    return Math.round((correct / phishingEmails.length) * 100);
  };

  const restart = () => {
    setCurrentEmailIndex(0);
    setAnswers([]);
    setShowResult(false);
    setShowFeedback(false);
    setSelectedAnswer(null);
  };

  if (showResult) {
    const correct = answers.filter(Boolean).length;
    return (
      <VirtualPhone onClose={onClose} title="Email Security Test">
        <SimulationResult 
          score={calculateScore()}
          correct={correct}
          total={phishingEmails.length}
          onRestart={restart}
        />
      </VirtualPhone>
    );
  }

  return (
    <VirtualPhone onClose={onClose} title="Email Security Test">
      <div className="p-4 space-y-4">
        {/* Progress */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">
            Email {currentEmailIndex + 1} of {phishingEmails.length}
          </span>
          <div className="flex gap-1">
            {phishingEmails.map((_, index) => (
              <div 
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index < currentEmailIndex ? 'bg-success' :
                  index === currentEmailIndex ? 'bg-primary' : 'bg-muted'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Email Card */}
        <Card className="p-4 space-y-4">
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-2">
              <Mail className="h-5 w-5 text-primary" />
              <div>
                <p className="font-semibold text-sm">{currentEmail.from}</p>
                <p className="text-xs text-muted-foreground flex items-center gap-1">
                  <Clock className="h-3 w-3" />
                  {currentEmail.time}
                </p>
              </div>
            </div>
          </div>

          <div>
            <h3 className="font-semibold mb-2">{currentEmail.subject}</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              {currentEmail.body}
            </p>
          </div>

          {currentEmail.isPhishing && (
            <div className="flex gap-2">
              <Button variant="destructive" size="sm" className="text-xs">
                <ExternalLink className="h-3 w-3 mr-1" />
                Verify Account
              </Button>
              <Button variant="outline" size="sm" className="text-xs">
                <Download className="h-3 w-3 mr-1" />
                Download
              </Button>
            </div>
          )}
        </Card>

        {/* Question */}
        <Card className="p-4">
          <h3 className="font-semibold mb-3">Is this email suspicious?</h3>
          <div className="space-y-3">
            <Button 
              onClick={() => handleAnswer(true)}
              variant={selectedAnswer === true ? "destructive" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <AlertTriangle className="h-4 w-4 mr-2" />
              Yes, this looks like phishing
            </Button>
            <Button 
              onClick={() => handleAnswer(false)}
              variant={selectedAnswer === false ? "default" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <Shield className="h-4 w-4 mr-2" />
              No, this seems legitimate
            </Button>
          </div>
        </Card>

        {/* Feedback */}
        {showFeedback && (
          <Card className={`p-4 border-2 ${
            selectedAnswer === currentEmail.isPhishing ? 'border-success' : 'border-destructive'
          }`}>
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                {selectedAnswer === currentEmail.isPhishing ? (
                  <>
                    <Shield className="h-5 w-5 text-success" />
                    <span className="font-semibold text-success">Correct!</span>
                  </>
                ) : (
                  <>
                    <AlertTriangle className="h-5 w-5 text-destructive" />
                    <span className="font-semibold text-destructive">Incorrect</span>
                  </>
                )}
              </div>

              <p className="text-sm">
                This email is {currentEmail.isPhishing ? "a phishing attempt" : "legitimate"}.
              </p>

              {currentEmail.isPhishing && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Red flags:</p>
                  <div className="space-y-1">
                    {currentEmail.redFlags?.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <AlertTriangle className="h-3 w-3 text-destructive mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </Card>
        )}
      </div>
    </VirtualPhone>
  );
};

--- END FILE: src\components\simulation\EmailPhishingGame.tsx ---

--- START FILE: src\components\simulation\PaymentSecuritySim.tsx ---

import { useState } from "react";
import { VirtualPhone, SimulationResult } from "./VirtualPhone";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { 
  CreditCard, 
  Shield, 
  Lock,
  AlertTriangle,
  CheckCircle,
  Eye,
  EyeOff
} from "lucide-react";

interface PaymentSecuritySimProps {
  onClose: () => void;
  type: "phishing" | "otp" | "card";
}

export const PaymentSecuritySim = ({ onClose, type }: PaymentSecuritySimProps) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState<boolean[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [userInput, setUserInput] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<boolean | null>(null);
  const [waitingForContinue, setWaitingForContinue] = useState(false);

  const getSimulationData = () => {
    switch (type) {
      case "phishing":
        return {
          title: "Phishing Detection",
          scenarios: [
            {
              type: "payment-page",
              question: "Is this payment page secure?",
              content: (
                <Card className="p-4 border-2 border-red-500">
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 bg-red-500 rounded-full"></div>
                      <span className="text-sm">http://amazone-pay.secure-checkout.net</span>
                    </div>
                    <h3 className="font-bold">Complete Your Purchase</h3>
                    <p className="text-sm">Enter your card details to continue</p>
                    <Input placeholder="Card Number" />
                    <Input placeholder="CVV" type="password" />
                    <Button className="w-full bg-red-600">Pay Now - Limited Time!</Button>
                  </div>
                </Card>
              ),
              isSecure: false,
              explanation: "Red flags: HTTP (not HTTPS), suspicious URL, pressure tactics"
            },
            {
              type: "payment-page",
              question: "Is this payment page secure?",
              content: (
                <Card className="p-4 border-2 border-green-500">
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Lock className="w-4 h-4 text-green-500" />
                      <span className="text-sm">https://checkout.amazon.com</span>
                    </div>
                    <h3 className="font-bold">Amazon Checkout</h3>
                    <p className="text-sm">Review your order</p>
                    <div className="bg-muted p-3 rounded">
                      <p className="text-sm">Order Total: $29.99</p>
                    </div>
                    <Button className="w-full">Place Your Order</Button>
                  </div>
                </Card>
              ),
              isSecure: true,
              explanation: "Secure: HTTPS connection, legitimate domain, no pressure tactics"
            }
          ]
        };
      case "otp":
        return {
          title: "OTP Security",
          scenarios: [
            {
              type: "otp-request",
              question: "Should you share this OTP?",
              content: (
                <Card className="p-4">
                  <div className="space-y-4">
                    <div className="bg-blue-50 p-3 rounded border-l-4 border-blue-500">
                      <p className="text-sm"><strong>SMS from Bank:</strong> Your OTP is 123456. Valid for 5 minutes.</p>
                    </div>
                    <div className="bg-red-50 p-3 rounded">
                      <p className="text-sm"><strong>Caller:</strong> "Hello, I'm calling from your bank. For security verification, please share the OTP you just received."</p>
                    </div>
                    <Button variant="destructive" className="w-full">Share OTP: 123456</Button>
                  </div>
                </Card>
              ),
              isSecure: false,
              explanation: "Never share OTP with anyone! Banks never ask for OTP over phone calls."
            },
            {
              type: "otp-usage",
              question: "Is this OTP usage appropriate?",
              content: (
                <Card className="p-4">
                  <div className="space-y-4">
                    <p className="text-sm font-semibold">You initiated a payment on your banking app</p>
                    <div className="bg-green-50 p-3 rounded border-l-4 border-green-500">
                      <p className="text-sm"><strong>SMS:</strong> OTP for payment to Amazon: 789012</p>
                    </div>
                    <Input placeholder="Enter OTP" value="789012" readOnly />
                    <Button className="w-full">Confirm Payment</Button>
                  </div>
                </Card>
              ),
              isSecure: true,
              explanation: "Correct! You initiated the transaction yourself and are entering OTP on the official app."
            }
          ]
        };
      case "card":
        return {
          title: "Card Safety",
          scenarios: [
            {
              type: "card-sharing",
              question: "Is it safe to share these card details?",
              content: (
                <Card className="p-4">
                  <div className="space-y-4">
                    <p className="text-sm"><strong>Friend:</strong> "Can you lend me ‚Çπ5000? Just share your card details on WhatsApp, I'll pay you back tomorrow!"</p>
                    <div className="bg-gray-100 p-3 rounded">
                      <p className="text-sm">Card: 1234 5678 9012 3456</p>
                      <p className="text-sm">CVV: 123</p>
                      <p className="text-sm">Exp: 12/25</p>
                    </div>
                    <Button variant="destructive" className="w-full">Send Card Details</Button>
                  </div>
                </Card>
              ),
              isSecure: false,
              explanation: "Never share card details via messages! Use secure bank transfers instead."
            },
            {
              type: "secure-payment",
              question: "Is this payment method secure?",
              content: (
                <Card className="p-4">
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Shield className="w-5 h-5 text-green-500" />
                      <span className="font-semibold">UPI Payment</span>
                    </div>
                    <p className="text-sm">Pay to: friend@upi</p>
                    <p className="text-sm">Amount: ‚Çπ5000</p>
                    <Input placeholder="Enter UPI PIN" type="password" />
                    <Button className="w-full">Pay Securely</Button>
                  </div>
                </Card>
              ),
              isSecure: true,
              explanation: "Secure! UPI doesn't expose card details and uses encrypted transactions."
            }
          ]
        };
      default:
        return { title: "", scenarios: [] };
    }
  };

  const simulationData = getSimulationData();
  const currentScenario = simulationData.scenarios[currentStep];
  const isLastStep = currentStep === simulationData.scenarios.length - 1;

  const handleAnswer = (answer: boolean) => {
    setSelectedAnswer(answer);
    setShowFeedback(true);
    setWaitingForContinue(true);
  };

  const handleContinue = () => {
    const isCorrect = selectedAnswer === currentScenario.isSecure;
    const newAnswers = [...answers, isCorrect];
    setAnswers(newAnswers);

    if (isLastStep) {
      setShowResult(true);
    } else {
      setCurrentStep(currentStep + 1);
      setShowFeedback(false);
      setSelectedAnswer(null);
      setWaitingForContinue(false);
    }
  };

  const calculateScore = () => {
    const correct = answers.filter(Boolean).length;
    return Math.round((correct / simulationData.scenarios.length) * 100);
  };

  const restart = () => {
    setCurrentStep(0);
    setAnswers([]);
    setShowResult(false);
    setUserInput("");
  };

  if (showResult) {
    const correct = answers.filter(Boolean).length;
    return (
      <VirtualPhone onClose={onClose} title={simulationData.title}>
        <SimulationResult 
          score={calculateScore()}
          correct={correct}
          total={simulationData.scenarios.length}
          onRestart={restart}
        />
      </VirtualPhone>
    );
  }

  return (
    <VirtualPhone onClose={onClose} title={simulationData.title}>
      <div className="p-4 space-y-4">
        {/* Progress */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">
            Step {currentStep + 1} of {simulationData.scenarios.length}
          </span>
          <div className="flex gap-1">
            {simulationData.scenarios.map((_, index) => (
              <div 
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index < currentStep ? 'bg-success' :
                  index === currentStep ? 'bg-primary' : 'bg-muted'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Scenario */}
        <div className="space-y-4">
          <h3 className="font-semibold">{currentScenario.question}</h3>
          {currentScenario.content}
        </div>

        {/* Answer Buttons */}
        <div className="space-y-3">
          <Button 
            onClick={() => handleAnswer(true)}
            variant="default"
            className="w-full justify-start"
          >
            <CheckCircle className="h-4 w-4 mr-2" />
            Yes, this is secure
          </Button>
          <Button 
            onClick={() => handleAnswer(false)}
            variant="destructive"
            className="w-full justify-start"
          >
            <AlertTriangle className="h-4 w-4 mr-2" />
            No, this is not secure
          </Button>
        </div>

        {/* Show explanation after answer */}
        {answers[currentStep] !== undefined && (
          <Card className={`p-4 border-2 ${
            answers[currentStep] ? 'border-success' : 'border-destructive'
          }`}>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                {answers[currentStep] ? (
                  <>
                    <CheckCircle className="h-5 w-5 text-success" />
                    <span className="font-semibold text-success">Correct!</span>
                  </>
                ) : (
                  <>
                    <AlertTriangle className="h-5 w-5 text-destructive" />
                    <span className="font-semibold text-destructive">Incorrect</span>
                  </>
                )}
              </div>
              <p className="text-sm">{currentScenario.explanation}</p>
            </div>
          </Card>
        )}
      </div>
    </VirtualPhone>
  );
};

--- END FILE: src\components\simulation\PaymentSecuritySim.tsx ---

--- START FILE: src\components\simulation\RomanceScamSim.tsx ---

import { useState } from "react";
import { VirtualPhone, SimulationResult } from "./VirtualPhone";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Heart, 
  AlertTriangle, 
  Shield,
  MessageCircle,
  DollarSign,
  Plane,
  CheckCircle,
  X,
  Camera
} from "lucide-react";

interface RomanceScamSimProps {
  onClose: () => void;
}

const romanceScenarios = [
  {
    id: 1,
    type: "dating-profile",
    title: "Dating App Profile",
    profile: {
      name: "Dr. Michael Johnson",
      age: "45",
      profession: "Army Doctor deployed overseas",
      photos: "Professional photos, too perfect",
      bio: "Widowed, looking for true love. Currently stationed in Syria."
    },
    messages: [
      "Hello beautiful, you have captured my heart ‚ù§Ô∏è",
      "I feel such a strong connection with you",
      "I'm deployed overseas but will be back soon"
    ],
    isScam: true,
    redFlags: ["Too perfect photos", "Claims military deployment", "Professes love quickly", "Grammar inconsistencies"],
    warning: "Common romance scam tactics: fake military profile, quick emotional attachment"
  },
  {
    id: 2,
    type: "emergency-request",
    title: "Emergency Money Request",
    scenario: "After 2 weeks of chatting, your online match sends this message:",
    message: "My darling, I'm in trouble. My wallet was stolen and I need $500 to get home. I'll pay you back as soon as I return. Please help me, I have no one else to turn to. Send money via Western Union to: [Address]",
    context: "You've never met in person, only chatted online",
    isScam: true,
    redFlags: ["Money request", "Emergency situation", "Western Union (untraceable)", "Never met in person"],
    warning: "NEVER send money to someone you haven't met in person!"
  },
  {
    id: 3,
    type: "genuine-connection",
    title: "Genuine Dating Scenario",
    scenario: "You've been chatting with someone from a dating app:",
    interaction: {
      timeline: "3 weeks of chatting",
      meetings: "Met for coffee twice",
      communication: "Video calls, normal conversations",
      request: "Would like to meet for dinner this weekend"
    },
    isScam: false,
    positiveFlags: ["Met in person", "Video calls", "Reasonable timeline", "Local meetings"],
    guidance: "This appears genuine: in-person meetings, reasonable progression, no money requests"
  }
];

export const RomanceScamSim = ({ onClose }: RomanceScamSimProps) => {
  const [currentScenarioIndex, setCurrentScenarioIndex] = useState(0);
  const [answers, setAnswers] = useState<boolean[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<boolean | null>(null);
  const [waitingForContinue, setWaitingForContinue] = useState(false);

  const currentScenario = romanceScenarios[currentScenarioIndex];
  const isLastScenario = currentScenarioIndex === romanceScenarios.length - 1;

  const handleAnswer = (answer: boolean) => {
    setSelectedAnswer(answer);
    setShowFeedback(true);
    setWaitingForContinue(true);
  };

  const handleContinue = () => {
    const isCorrect = selectedAnswer === currentScenario.isScam;
    const newAnswers = [...answers, isCorrect];
    setAnswers(newAnswers);
    
    if (isLastScenario) {
      setShowResult(true);
    } else {
      setCurrentScenarioIndex(currentScenarioIndex + 1);
      setShowFeedback(false);
      setSelectedAnswer(null);
      setWaitingForContinue(false);
    }
  };

  const calculateScore = () => {
    const correct = answers.filter(Boolean).length;
    return Math.round((correct / romanceScenarios.length) * 100);
  };

  const restart = () => {
    setCurrentScenarioIndex(0);
    setAnswers([]);
    setShowResult(false);
    setShowFeedback(false);
    setSelectedAnswer(null);
    setWaitingForContinue(false);
  };

  if (showResult) {
    const correct = answers.filter(Boolean).length;
    return (
      <VirtualPhone onClose={onClose} title="Romance Scam Awareness">
        <SimulationResult 
          score={calculateScore()}
          correct={correct}
          total={romanceScenarios.length}
          onRestart={restart}
        />
      </VirtualPhone>
    );
  }

  return (
    <VirtualPhone onClose={onClose} title="Romance Scam Awareness">
      <div className="p-4 space-y-4">
        {/* Progress */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">
            Scenario {currentScenarioIndex + 1} of {romanceScenarios.length}
          </span>
          <div className="flex gap-1">
            {romanceScenarios.map((_, index) => (
              <div 
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index < currentScenarioIndex ? 'bg-success' :
                  index === currentScenarioIndex ? 'bg-primary' : 'bg-muted'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Scenario Content */}
        <Card className="p-4 space-y-4">
          <div className="flex items-center gap-2">
            <Heart className="h-5 w-5 text-pink-500" />
            <h3 className="font-semibold">{currentScenario.title}</h3>
          </div>

          {currentScenario.type === "dating-profile" && (
            <div className="space-y-3">
              <div className="bg-pink-50 dark:bg-pink-950 p-3 rounded">
                <div className="space-y-2">
                  <p className="text-sm"><strong>Name:</strong> {currentScenario.profile?.name}</p>
                  <p className="text-sm"><strong>Age:</strong> {currentScenario.profile?.age}</p>
                  <p className="text-sm"><strong>Profession:</strong> {currentScenario.profile?.profession}</p>
                  <p className="text-sm"><strong>Photos:</strong> {currentScenario.profile?.photos}</p>
                  <p className="text-sm"><strong>Bio:</strong> {currentScenario.profile?.bio}</p>
                </div>
              </div>
              
              <div className="space-y-2">
                <p className="text-sm font-semibold">Recent Messages:</p>
                {currentScenario.messages?.map((message, index) => (
                  <div key={index} className="bg-blue-50 dark:bg-blue-950 p-2 rounded">
                    <p className="text-sm italic">"{message}"</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {currentScenario.type === "emergency-request" && (
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground">{currentScenario.scenario}</p>
              <div className="bg-red-50 dark:bg-red-950 p-3 rounded border-l-4 border-red-500">
                <p className="text-sm italic">"{currentScenario.message}"</p>
              </div>
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-warning" />
                <span className="text-sm text-muted-foreground">{currentScenario.context}</span>
              </div>
            </div>
          )}

          {currentScenario.type === "genuine-connection" && (
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground">{currentScenario.scenario}</p>
              <div className="bg-green-50 dark:bg-green-950 p-3 rounded">
                <div className="space-y-2">
                  <p className="text-sm"><strong>Timeline:</strong> {currentScenario.interaction?.timeline}</p>
                  <p className="text-sm"><strong>Meetings:</strong> {currentScenario.interaction?.meetings}</p>
                  <p className="text-sm"><strong>Communication:</strong> {currentScenario.interaction?.communication}</p>
                  <p className="text-sm"><strong>Current Request:</strong> {currentScenario.interaction?.request}</p>
                </div>
              </div>
            </div>
          )}
        </Card>

        {/* Question */}
        <Card className="p-4">
          <h3 className="font-semibold mb-3">Is this a romance scam?</h3>
          <div className="space-y-3">
            <Button 
              onClick={() => handleAnswer(true)}
              variant={selectedAnswer === true ? "destructive" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <AlertTriangle className="h-4 w-4 mr-2" />
              Yes, this is a scam
            </Button>
            <Button 
              onClick={() => handleAnswer(false)}
              variant={selectedAnswer === false ? "default" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <Heart className="h-4 w-4 mr-2" />
              No, this seems genuine
            </Button>
          </div>
        </Card>

        {/* Feedback */}
        {showFeedback && (
          <Card className={`p-4 border-2 ${
            selectedAnswer === currentScenario.isScam ? 'border-success' : 'border-destructive'
          }`}>
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                {selectedAnswer === currentScenario.isScam ? (
                  <>
                    <CheckCircle className="h-5 w-5 text-success" />
                    <span className="font-semibold text-success">Correct!</span>
                  </>
                ) : (
                  <>
                    <X className="h-5 w-5 text-destructive" />
                    <span className="font-semibold text-destructive">Incorrect</span>
                  </>
                )}
              </div>

              <p className="text-sm font-medium">
                {currentScenario.warning || currentScenario.guidance}
              </p>

              {currentScenario.isScam && currentScenario.redFlags && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Red flags:</p>
                  <div className="space-y-1">
                    {currentScenario.redFlags.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <AlertTriangle className="h-3 w-3 text-destructive mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {!currentScenario.isScam && currentScenario.positiveFlags && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Positive indicators:</p>
                  <div className="space-y-1">
                    {currentScenario.positiveFlags.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <CheckCircle className="h-3 w-3 text-success mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {waitingForContinue && (
                <Button onClick={handleContinue} className="w-full mt-4">
                  {isLastScenario ? "View Results" : "Continue"}
                </Button>
              )}
            </div>
          </Card>
        )}
      </div>
    </VirtualPhone>
  );
};

--- END FILE: src\components\simulation\RomanceScamSim.tsx ---

--- START FILE: src\components\simulation\SocialMediaScamSim.tsx ---

import { useState } from "react";
import { VirtualPhone, SimulationResult } from "./VirtualPhone";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Share2, 
  AlertTriangle, 
  Shield,
  Gift,
  Users,
  ExternalLink,
  CheckCircle,
  X,
  MessageSquare,
  ThumbsUp
} from "lucide-react";

interface SocialMediaScamSimProps {
  onClose: () => void;
}

const socialMediaScenarios = [
  {
    id: 1,
    type: "fake-giveaway",
    title: "Social Media Giveaway",
    post: {
      account: "@fake_brand_official",
      followers: "2.3K followers",
      content: "üéâ MEGA GIVEAWAY! Win iPhone 15 Pro! To enter: 1) Like this post 2) Share 3) Comment your name 4) Send us your address and phone number in DM. Only 24 hours left! ‚è∞",
      engagement: "10K likes, 5K shares",
      comments: ["Is this real?", "Just sent my details!", "Seems too good to be true"]
    },
    isScam: true,
    redFlags: ["Requests personal info", "Unverified account", "High engagement vs low followers", "Urgency tactics"],
    explanation: "Fake giveaways collect personal data for identity theft and fraud."
  },
  {
    id: 2,
    type: "investment-scheme",
    title: "Investment Opportunity Post",
    post: {
      account: "CryptoMaster_2024",
      content: "üí∞ I made $50,000 in just 1 week trading crypto! My secret method is only available for 48 hours. Send $200 to learn my strategy. DM for details! üöÄüìà #GetRichQuick #CryptoSecrets",
      images: "Screenshots of fake profits",
      hashtags: "#GetRichQuick #EasyMoney #CryptoSecrets"
    },
    isScam: true,
    redFlags: ["Unrealistic returns", "Pay to learn secrets", "Get rich quick claims", "No credentials shown"],
    explanation: "Investment scams promise unrealistic returns and disappear after taking your money."
  },
  {
    id: 3,
    type: "legitimate-brand",
    title: "Official Brand Post",
    post: {
      account: "@nike ‚úì",
      followers: "146M followers",
      content: "Just Do It. New Air Max collection now available. Shop now with free shipping on orders over $50. Terms and conditions apply.",
      verification: "Blue check verified",
      website: "Official nike.com link"
    },
    isScam: false,
    positiveFlags: ["Verified account", "Official website", "Reasonable offer", "Clear terms"],
    explanation: "This is legitimate: verified account, realistic offers, official links."
  },
  {
    id: 4,
    type: "phishing-quiz",
    title: "Personality Quiz Scam",
    post: {
      content: "üß† AMAZING! This quiz reveals your exact personality type! Click here to discover what your birth date says about you! Share your results! [Link to external site that asks for personal details]",
      permissions: "Requests access to: Profile info, Friend list, Email address"
    },
    isScam: true,
    redFlags: ["Requests extensive permissions", "External suspicious link", "Data harvesting quiz", "Too personal questions"],
    explanation: "Personality quizzes often harvest personal data for marketing or identity theft."
  }
];

export const SocialMediaScamSim = ({ onClose }: SocialMediaScamSimProps) => {
  const [currentScenarioIndex, setCurrentScenarioIndex] = useState(0);
  const [answers, setAnswers] = useState<boolean[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<boolean | null>(null);
  const [waitingForContinue, setWaitingForContinue] = useState(false);

  const currentScenario = socialMediaScenarios[currentScenarioIndex];
  const isLastScenario = currentScenarioIndex === socialMediaScenarios.length - 1;

  const handleAnswer = (answer: boolean) => {
    setSelectedAnswer(answer);
    setShowFeedback(true);
    setWaitingForContinue(true);
  };

  const handleContinue = () => {
    const isCorrect = selectedAnswer === currentScenario.isScam;
    const newAnswers = [...answers, isCorrect];
    setAnswers(newAnswers);
    
    if (isLastScenario) {
      setShowResult(true);
    } else {
      setCurrentScenarioIndex(currentScenarioIndex + 1);
      setShowFeedback(false);
      setSelectedAnswer(null);
      setWaitingForContinue(false);
    }
  };

  const calculateScore = () => {
    const correct = answers.filter(Boolean).length;
    return Math.round((correct / socialMediaScenarios.length) * 100);
  };

  const restart = () => {
    setCurrentScenarioIndex(0);
    setAnswers([]);
    setShowResult(false);
    setShowFeedback(false);
    setSelectedAnswer(null);
    setWaitingForContinue(false);
  };

  if (showResult) {
    const correct = answers.filter(Boolean).length;
    return (
      <VirtualPhone onClose={onClose} title="Social Media Fraud Detection">
        <SimulationResult 
          score={calculateScore()}
          correct={correct}
          total={socialMediaScenarios.length}
          onRestart={restart}
        />
      </VirtualPhone>
    );
  }

  return (
    <VirtualPhone onClose={onClose} title="Social Media Fraud Detection">
      <div className="p-4 space-y-4">
        {/* Progress */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">
            Post {currentScenarioIndex + 1} of {socialMediaScenarios.length}
          </span>
          <div className="flex gap-1">
            {socialMediaScenarios.map((_, index) => (
              <div 
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index < currentScenarioIndex ? 'bg-success' :
                  index === currentScenarioIndex ? 'bg-primary' : 'bg-muted'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Social Media Post */}
        <Card className="p-4 space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-primary rounded-full flex items-center justify-center">
                <Share2 className="h-4 w-4 text-primary-foreground" />
              </div>
              <div>
                <p className="font-semibold text-sm flex items-center gap-1">
                  {currentScenario.post.account}
                  {currentScenario.post.verification && <CheckCircle className="h-3 w-3 text-blue-500" />}
                </p>
                {currentScenario.post.followers && (
                  <p className="text-xs text-muted-foreground">{currentScenario.post.followers}</p>
                )}
              </div>
            </div>
          </div>

          <div className="space-y-3">
            <p className="text-sm">{currentScenario.post.content}</p>

            {currentScenario.post.images && (
              <div className="bg-muted/50 p-3 rounded text-center">
                <p className="text-xs text-muted-foreground">[{currentScenario.post.images}]</p>
              </div>
            )}

            {currentScenario.post.hashtags && (
              <p className="text-sm text-blue-600">{currentScenario.post.hashtags}</p>
            )}

            {currentScenario.post.website && (
              <div className="flex items-center gap-2">
                <ExternalLink className="h-3 w-3 text-muted-foreground" />
                <span className="text-xs text-muted-foreground">{currentScenario.post.website}</span>
              </div>
            )}

            {currentScenario.post.permissions && (
              <div className="bg-red-50 dark:bg-red-950 p-3 rounded border border-red-200">
                <p className="text-xs font-semibold text-red-600 mb-1">App Permissions:</p>
                <p className="text-xs text-red-600">{currentScenario.post.permissions}</p>
              </div>
            )}

            {/* Engagement indicators */}
            <div className="flex items-center gap-4 pt-2 border-t border-border/50">
              <Button variant="ghost" size="sm" className="h-8 px-2">
                <ThumbsUp className="h-3 w-3 mr-1" />
                <span className="text-xs">Like</span>
              </Button>
              <Button variant="ghost" size="sm" className="h-8 px-2">
                <MessageSquare className="h-3 w-3 mr-1" />
                <span className="text-xs">Comment</span>
              </Button>
              <Button variant="ghost" size="sm" className="h-8 px-2">
                <Share2 className="h-3 w-3 mr-1" />
                <span className="text-xs">Share</span>
              </Button>
            </div>

            {currentScenario.post.engagement && (
              <p className="text-xs text-muted-foreground">{currentScenario.post.engagement}</p>
            )}

            {currentScenario.post.comments && (
              <div className="space-y-1">
                <p className="text-xs font-semibold">Comments:</p>
                {currentScenario.post.comments.map((comment, index) => (
                  <p key={index} className="text-xs text-muted-foreground italic">‚Ä¢ {comment}</p>
                ))}
              </div>
            )}
          </div>
        </Card>

        {/* Question */}
        <Card className="p-4">
          <h3 className="font-semibold mb-3">Is this post fraudulent or suspicious?</h3>
          <div className="space-y-3">
            <Button 
              onClick={() => handleAnswer(true)}
              variant={selectedAnswer === true ? "destructive" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <AlertTriangle className="h-4 w-4 mr-2" />
              Yes, this is a scam
            </Button>
            <Button 
              onClick={() => handleAnswer(false)}
              variant={selectedAnswer === false ? "default" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <Shield className="h-4 w-4 mr-2" />
              No, this is legitimate
            </Button>
          </div>
        </Card>

        {/* Feedback */}
        {showFeedback && (
          <Card className={`p-4 border-2 ${
            selectedAnswer === currentScenario.isScam ? 'border-success' : 'border-destructive'
          }`}>
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                {selectedAnswer === currentScenario.isScam ? (
                  <>
                    <CheckCircle className="h-5 w-5 text-success" />
                    <span className="font-semibold text-success">Correct!</span>
                  </>
                ) : (
                  <>
                    <X className="h-5 w-5 text-destructive" />
                    <span className="font-semibold text-destructive">Incorrect</span>
                  </>
                )}
              </div>

              <p className="text-sm">{currentScenario.explanation}</p>

              {currentScenario.isScam && currentScenario.redFlags && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Red flags:</p>
                  <div className="space-y-1">
                    {currentScenario.redFlags.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <AlertTriangle className="h-3 w-3 text-destructive mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {!currentScenario.isScam && currentScenario.positiveFlags && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Positive indicators:</p>
                  <div className="space-y-1">
                    {currentScenario.positiveFlags.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <CheckCircle className="h-3 w-3 text-success mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {waitingForContinue && (
                <Button onClick={handleContinue} className="w-full mt-4">
                  {isLastScenario ? "View Results" : "Continue"}
                </Button>
              )}
            </div>
          </Card>
        )}
      </div>
    </VirtualPhone>
  );
};

--- END FILE: src\components\simulation\SocialMediaScamSim.tsx ---

--- START FILE: src\components\simulation\TechSupportScamSim.tsx ---

import { useState } from "react";
import { VirtualPhone, SimulationResult } from "./VirtualPhone";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Phone, 
  AlertTriangle, 
  Shield,
  Monitor,
  Download,
  CreditCard,
  CheckCircle,
  X
} from "lucide-react";

interface TechSupportScamSimProps {
  onClose: () => void;
}

const scamScenarios = [
  {
    id: 1,
    type: "call",
    title: "Suspicious Tech Support Call",
    content: {
      caller: "Microsoft Support",
      message: "Hello, this is John from Microsoft. We've detected viruses on your computer. Please allow us remote access to fix this immediately.",
      urgency: "URGENT",
      requestedAction: "Remote access + Payment"
    },
    isScam: true,
    redFlags: ["Unsolicited call", "Claims virus detection", "Requests remote access", "Pressure tactics"],
    correctResponse: "Hang up immediately. Microsoft doesn't make unsolicited calls."
  },
  {
    id: 2,
    type: "popup",
    title: "Computer Warning Popup",
    content: {
      title: "‚ö†Ô∏è CRITICAL SECURITY ALERT",
      message: "Your computer is infected with 5 viruses! Call +1-800-FAKE-NUM immediately. DO NOT close this window!",
      buttons: ["Call Now", "Download Fix", "Pay $99 for Removal"]
    },
    isScam: true,
    redFlags: ["Fake urgency", "Phone number provided", "Demands payment", "Prevents closing"],
    correctResponse: "Close the popup. Real antivirus doesn't use pop-ups with phone numbers."
  },
  {
    id: 3,
    type: "legitimate",
    title: "Genuine IT Support",
    content: {
      context: "You contacted your company's IT department about a login issue",
      response: "Hi, this is Sarah from IT. I see you submitted a ticket about password reset. I'll send you a secure link via your work email.",
      verification: "Employee ID and work email verification"
    },
    isScam: false,
    correctResponse: "This is legitimate since you initiated contact and they're using proper verification."
  }
];

export const TechSupportScamSim = ({ onClose }: TechSupportScamSimProps) => {
  const [currentScenarioIndex, setCurrentScenarioIndex] = useState(0);
  const [answers, setAnswers] = useState<boolean[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<boolean | null>(null);
  const [waitingForContinue, setWaitingForContinue] = useState(false);

  const currentScenario = scamScenarios[currentScenarioIndex];
  const isLastScenario = currentScenarioIndex === scamScenarios.length - 1;

  const handleAnswer = (answer: boolean) => {
    setSelectedAnswer(answer);
    setShowFeedback(true);
    setWaitingForContinue(true);
  };

  const handleContinue = () => {
    const isCorrect = selectedAnswer === currentScenario.isScam;
    const newAnswers = [...answers, isCorrect];
    setAnswers(newAnswers);
    
    if (isLastScenario) {
      setShowResult(true);
    } else {
      setCurrentScenarioIndex(currentScenarioIndex + 1);
      setShowFeedback(false);
      setSelectedAnswer(null);
      setWaitingForContinue(false);
    }
  };

  const calculateScore = () => {
    const correct = answers.filter(Boolean).length;
    return Math.round((correct / scamScenarios.length) * 100);
  };

  const restart = () => {
    setCurrentScenarioIndex(0);
    setAnswers([]);
    setShowResult(false);
    setShowFeedback(false);
    setSelectedAnswer(null);
    setWaitingForContinue(false);
  };

  if (showResult) {
    const correct = answers.filter(Boolean).length;
    return (
      <VirtualPhone onClose={onClose} title="Tech Support Scam Test">
        <SimulationResult 
          score={calculateScore()}
          correct={correct}
          total={scamScenarios.length}
          onRestart={restart}
        />
      </VirtualPhone>
    );
  }

  return (
    <VirtualPhone onClose={onClose} title="Tech Support Scam Test">
      <div className="p-4 space-y-4">
        {/* Progress */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">
            Scenario {currentScenarioIndex + 1} of {scamScenarios.length}
          </span>
          <div className="flex gap-1">
            {scamScenarios.map((_, index) => (
              <div 
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index < currentScenarioIndex ? 'bg-success' :
                  index === currentScenarioIndex ? 'bg-primary' : 'bg-muted'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Scenario Card */}
        <Card className="p-4 space-y-4">
          <div className="flex items-center gap-2">
            <Phone className="h-5 w-5 text-primary" />
            <h3 className="font-semibold">{currentScenario.title}</h3>
          </div>

          {currentScenario.type === "call" && (
            <div className="space-y-3">
              <div className="bg-blue-50 dark:bg-blue-950 p-3 rounded">
                <p className="text-sm"><strong>Caller ID:</strong> {currentScenario.content.caller}</p>
              </div>
              <div className="bg-gray-50 dark:bg-gray-900 p-3 rounded">
                <p className="text-sm italic">"{currentScenario.content.message}"</p>
              </div>
              {currentScenario.content.urgency && (
                <Badge variant="destructive" className="w-fit">
                  {currentScenario.content.urgency}
                </Badge>
              )}
            </div>
          )}

          {currentScenario.type === "popup" && (
            <div className="space-y-3">
              <div className="bg-red-50 dark:bg-red-950 p-4 rounded border-2 border-red-500 text-center">
                <h4 className="font-bold text-red-600">{currentScenario.content.title}</h4>
                <p className="text-sm mt-2">{currentScenario.content.message}</p>
                <div className="mt-3 space-y-2">
                  {currentScenario.content.buttons?.map((button, index) => (
                    <Button key={index} variant="destructive" size="sm" className="w-full text-xs">
                      {button}
                    </Button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {currentScenario.type === "legitimate" && (
            <div className="space-y-3">
              <div className="bg-green-50 dark:bg-green-950 p-3 rounded">
                <p className="text-sm"><strong>Context:</strong> {currentScenario.content.context}</p>
              </div>
              <div className="bg-gray-50 dark:bg-gray-900 p-3 rounded">
                <p className="text-sm italic">"{currentScenario.content.response}"</p>
              </div>
              <div className="flex items-center gap-2">
                <Shield className="h-4 w-4 text-green-500" />
                <span className="text-sm text-green-600">{currentScenario.content.verification}</span>
              </div>
            </div>
          )}
        </Card>

        {/* Question */}
        <Card className="p-4">
          <h3 className="font-semibold mb-3">Is this a scam?</h3>
          <div className="space-y-3">
            <Button 
              onClick={() => handleAnswer(true)}
              variant={selectedAnswer === true ? "destructive" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <AlertTriangle className="h-4 w-4 mr-2" />
              Yes, this is a scam
            </Button>
            <Button 
              onClick={() => handleAnswer(false)}
              variant={selectedAnswer === false ? "default" : "outline"}
              className="w-full justify-start"
              disabled={showFeedback}
            >
              <Shield className="h-4 w-4 mr-2" />
              No, this is legitimate
            </Button>
          </div>
        </Card>

        {/* Feedback */}
        {showFeedback && (
          <Card className={`p-4 border-2 ${
            selectedAnswer === currentScenario.isScam ? 'border-success' : 'border-destructive'
          }`}>
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                {selectedAnswer === currentScenario.isScam ? (
                  <>
                    <CheckCircle className="h-5 w-5 text-success" />
                    <span className="font-semibold text-success">Correct!</span>
                  </>
                ) : (
                  <>
                    <X className="h-5 w-5 text-destructive" />
                    <span className="font-semibold text-destructive">Incorrect</span>
                  </>
                )}
              </div>

              <p className="text-sm">{currentScenario.correctResponse}</p>

              {currentScenario.isScam && (
                <div className="space-y-2">
                  <p className="text-sm font-semibold">Red flags:</p>
                  <div className="space-y-1">
                    {currentScenario.redFlags?.map((flag, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <AlertTriangle className="h-3 w-3 text-destructive mt-0.5 flex-shrink-0" />
                        <span className="text-xs text-muted-foreground">{flag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {waitingForContinue && (
                <Button onClick={handleContinue} className="w-full mt-4">
                  {isLastScenario ? "View Results" : "Continue"}
                </Button>
              )}
            </div>
          </Card>
        )}
      </div>
    </VirtualPhone>
  );
};

--- END FILE: src\components\simulation\TechSupportScamSim.tsx ---

--- START FILE: src\components\simulation\VirtualPhone.tsx ---

import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Home, 
  ArrowLeft, 
  Battery, 
  Wifi, 
  Signal,
  MoreHorizontal,
  X,
  Check,
  AlertTriangle
} from "lucide-react";

interface VirtualPhoneProps {
  children: React.ReactNode;
  onClose: () => void;
  title?: string;
  showStatusBar?: boolean;
}

export const VirtualPhone = ({ children, onClose, title = "Simulation", showStatusBar = true }: VirtualPhoneProps) => {
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="relative">
        {/* Phone Frame */}
        <div className="bg-slate-900 rounded-[2.5rem] p-3 shadow-2xl">
          <div className="bg-black rounded-[2rem] overflow-hidden w-[320px] h-[640px] relative">
            {/* Notch */}
            <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-32 h-6 bg-black rounded-b-xl z-10"></div>
            
            {/* Screen */}
            <div className="bg-background h-full w-full flex flex-col">
              {/* Status Bar */}
              {showStatusBar && (
                <div className="flex items-center justify-between px-6 py-2 text-xs text-muted-foreground bg-background/95 backdrop-blur-sm">
                  <div className="flex items-center gap-1">
                    <span className="font-mono">{currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Signal className="h-3 w-3" />
                    <Wifi className="h-3 w-3" />
                    <Battery className="h-3 w-3" />
                    <span className="text-xs">100%</span>
                  </div>
                </div>
              )}

              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-border/50">
                <Button variant="ghost" size="sm" onClick={onClose}>
                  <ArrowLeft className="h-4 w-4" />
                </Button>
                <h3 className="font-semibold">{title}</h3>
                <Button variant="ghost" size="sm" onClick={onClose}>
                  <X className="h-4 w-4" />
                </Button>
              </div>

              {/* Content */}
              <div className="flex-1 overflow-y-auto">
                {children}
              </div>

              {/* Home Indicator */}
              <div className="flex justify-center py-2">
                <div className="w-32 h-1 bg-muted-foreground/30 rounded-full"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

interface SimulationResultProps {
  score: number;
  correct: number;
  total: number;
  onRestart: () => void;
  onNext?: () => void;
}

export const SimulationResult = ({ score, correct, total, onRestart, onNext }: SimulationResultProps) => {
  const getScoreColor = (score: number) => {
    if (score >= 80) return "text-success";
    if (score >= 60) return "text-warning";
    return "text-destructive";
  };

  const getScoreIcon = (score: number) => {
    if (score >= 80) return <Check className="h-8 w-8 text-success" />;
    if (score >= 60) return <AlertTriangle className="h-8 w-8 text-warning" />;
    return <X className="h-8 w-8 text-destructive" />;
  };

  return (
    <div className="p-6 text-center space-y-6">
      <div className="space-y-4">
        {getScoreIcon(score)}
        <div>
          <h3 className="text-2xl font-bold font-orbitron">Simulation Complete!</h3>
          <p className="text-muted-foreground">Here's how you performed</p>
        </div>
      </div>

      <Card className="p-6 space-y-4">
        <div className="space-y-2">
          <div className="flex justify-between">
            <span>Score:</span>
            <span className={`font-bold ${getScoreColor(score)}`}>{score}%</span>
          </div>
          <div className="flex justify-between">
            <span>Correct Answers:</span>
            <span className="font-semibold">{correct}/{total}</span>
          </div>
        </div>
        
        <div className="w-full bg-muted rounded-full h-2">
          <div 
            className={`h-2 rounded-full transition-all duration-500 ${
              score >= 80 ? 'bg-success' : score >= 60 ? 'bg-warning' : 'bg-destructive'
            }`}
            style={{ width: `${score}%` }}
          ></div>
        </div>
      </Card>

      <div className="space-y-3">
        <Button onClick={onRestart} className="w-full">
          Try Again
        </Button>
        {onNext && (
          <Button onClick={onNext} variant="outline" className="w-full">
            Next Simulation
          </Button>
        )}
      </div>
    </div>
  );
};

--- END FILE: src\components\simulation\VirtualPhone.tsx ---

--- START FILE: src\components\ui\accordion.tsx ---

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


--- END FILE: src\components\ui\accordion.tsx ---

--- START FILE: src\components\ui\alert-dialog.tsx ---

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


--- END FILE: src\components\ui\alert-dialog.tsx ---

--- START FILE: src\components\ui\alert.tsx ---

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


--- END FILE: src\components\ui\alert.tsx ---

--- START FILE: src\components\ui\aspect-ratio.tsx ---

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


--- END FILE: src\components\ui\aspect-ratio.tsx ---

--- START FILE: src\components\ui\avatar.tsx ---

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


--- END FILE: src\components\ui\avatar.tsx ---

--- START FILE: src\components\ui\badge.tsx ---

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


--- END FILE: src\components\ui\badge.tsx ---

--- START FILE: src\components\ui\breadcrumb.tsx ---

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


--- END FILE: src\components\ui\breadcrumb.tsx ---

--- START FILE: src\components\ui\button.tsx ---

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


--- END FILE: src\components\ui\button.tsx ---

--- START FILE: src\components\ui\calendar.tsx ---

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


--- END FILE: src\components\ui\calendar.tsx ---

--- START FILE: src\components\ui\card.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


--- END FILE: src\components\ui\card.tsx ---

--- START FILE: src\components\ui\carousel.tsx ---

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


--- END FILE: src\components\ui\carousel.tsx ---

--- START FILE: src\components\ui\chart.tsx ---

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


--- END FILE: src\components\ui\chart.tsx ---

--- START FILE: src\components\ui\checkbox.tsx ---

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


--- END FILE: src\components\ui\checkbox.tsx ---

--- START FILE: src\components\ui\collapsible.tsx ---

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


--- END FILE: src\components\ui\collapsible.tsx ---

--- START FILE: src\components\ui\command.tsx ---

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


--- END FILE: src\components\ui\command.tsx ---

--- START FILE: src\components\ui\context-menu.tsx ---

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


--- END FILE: src\components\ui\context-menu.tsx ---

--- START FILE: src\components\ui\dialog.tsx ---

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


--- END FILE: src\components\ui\dialog.tsx ---

--- START FILE: src\components\ui\drawer.tsx ---

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


--- END FILE: src\components\ui\drawer.tsx ---

--- START FILE: src\components\ui\dropdown-menu.tsx ---

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


--- END FILE: src\components\ui\dropdown-menu.tsx ---

--- START FILE: src\components\ui\form.tsx ---

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


--- END FILE: src\components\ui\form.tsx ---

--- START FILE: src\components\ui\hover-card.tsx ---

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


--- END FILE: src\components\ui\hover-card.tsx ---

--- START FILE: src\components\ui\input-otp.tsx ---

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


--- END FILE: src\components\ui\input-otp.tsx ---

--- START FILE: src\components\ui\input.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


--- END FILE: src\components\ui\input.tsx ---

--- START FILE: src\components\ui\label.tsx ---

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


--- END FILE: src\components\ui\label.tsx ---

--- START FILE: src\components\ui\menubar.tsx ---

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


--- END FILE: src\components\ui\menubar.tsx ---

--- START FILE: src\components\ui\navigation-menu.tsx ---

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


--- END FILE: src\components\ui\navigation-menu.tsx ---

--- START FILE: src\components\ui\pagination.tsx ---

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


--- END FILE: src\components\ui\pagination.tsx ---

--- START FILE: src\components\ui\popover.tsx ---

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


--- END FILE: src\components\ui\popover.tsx ---

--- START FILE: src\components\ui\progress.tsx ---

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


--- END FILE: src\components\ui\progress.tsx ---

--- START FILE: src\components\ui\radio-group.tsx ---

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


--- END FILE: src\components\ui\radio-group.tsx ---

--- START FILE: src\components\ui\resizable.tsx ---

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


--- END FILE: src\components\ui\resizable.tsx ---

--- START FILE: src\components\ui\scroll-area.tsx ---

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


--- END FILE: src\components\ui\scroll-area.tsx ---

--- START FILE: src\components\ui\select.tsx ---

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


--- END FILE: src\components\ui\select.tsx ---

--- START FILE: src\components\ui\separator.tsx ---

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


--- END FILE: src\components\ui\separator.tsx ---

--- START FILE: src\components\ui\sheet.tsx ---

import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}



--- END FILE: src\components\ui\sheet.tsx ---

--- START FILE: src\components\ui\sidebar.tsx ---

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


--- END FILE: src\components\ui\sidebar.tsx ---

--- START FILE: src\components\ui\skeleton.tsx ---

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


--- END FILE: src\components\ui\skeleton.tsx ---

--- START FILE: src\components\ui\slider.tsx ---

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


--- END FILE: src\components\ui\slider.tsx ---

--- START FILE: src\components\ui\sonner.tsx ---

import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }


--- END FILE: src\components\ui\sonner.tsx ---

--- START FILE: src\components\ui\switch.tsx ---

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


--- END FILE: src\components\ui\switch.tsx ---

--- START FILE: src\components\ui\table.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


--- END FILE: src\components\ui\table.tsx ---

--- START FILE: src\components\ui\tabs.tsx ---

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- END FILE: src\components\ui\tabs.tsx ---

--- START FILE: src\components\ui\textarea.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


--- END FILE: src\components\ui\textarea.tsx ---

--- START FILE: src\components\ui\toast.tsx ---

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


--- END FILE: src\components\ui\toast.tsx ---

--- START FILE: src\components\ui\toaster.tsx ---

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


--- END FILE: src\components\ui\toaster.tsx ---

--- START FILE: src\components\ui\toggle-group.tsx ---

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


--- END FILE: src\components\ui\toggle-group.tsx ---

--- START FILE: src\components\ui\toggle.tsx ---

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


--- END FILE: src\components\ui\toggle.tsx ---

--- START FILE: src\components\ui\tooltip.tsx ---

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


--- END FILE: src\components\ui\tooltip.tsx ---

--- START FILE: src\components\ui\use-toast.ts ---

import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };


--- END FILE: src\components\ui\use-toast.ts ---

--- START FILE: src\hooks\use-mobile.tsx ---

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


--- END FILE: src\hooks\use-mobile.tsx ---

--- START FILE: src\hooks\use-toast.ts ---

import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


--- END FILE: src\hooks\use-toast.ts ---

--- START FILE: src\lib\utils.ts ---

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- END FILE: src\lib\utils.ts ---

--- START FILE: src\pages\AIAdvisor.tsx ---

// --- START FILE: src\pages\AIAdvisor.tsx ---

import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Layout } from "@/components/layout/Layout";
import { 
  Bot, 
  MessageCircle, 
  TrendingUp, 
  DollarSign,
  Send,
  Lightbulb,
  Target,
  AlertCircle,
  Loader2, // Added for loading spinner
  Globe // Added for translate button
} from "lucide-react";
import { toast } from "@/components/ui/use-toast"; // Using the shadcn toast component for notifications

// --- NEW IMPORTS FOR MARKDOWN RENDERING & LANGUAGE SELECTION ---
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// ---------------------------------------------------------------

// --- WARNING: DIRECTLY EMBEDDING API KEYS IN FRONTEND IS NOT SECURE FOR PRODUCTION ---
// For a production application, you should proxy this request through a backend server
// to keep your API key secure and prevent unauthorized usage.
const GEMINI_API_KEY = "AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA"; // THIS KEY IS EXPOSED!
const GEMINI_MODEL_NAME = "gemini-2.5-flash-preview-05-20";

// --- GOOGLE TRANSLATE API INFORMATION (FOR REFERENCE ONLY - NOT USED DIRECTLY WITHOUT KEY) ---
// IMPORTANT: There is NO official "keyless" Google Translate API for programmatic use.
// For actual translation, you would need to:
// 1. Enable Google Cloud Translation API in your Google Cloud project.
// 2. Obtain an API key.
// 3. (HIGHLY RECOMMENDED & SECURE) Create a backend endpoint that takes text and target language,
//    calls Google Cloud Translation API with your securely stored API key, and returns the translation.
// 4. Update this frontend code to call your new backend endpoint.
// The constants below are illustrative for a *real* (keyed) API call, but WILL NOT BE USED for translation in this "keyless" example.
const GOOGLE_TRANSLATE_API_URL = "https://translation.googleapis.com/language/translate/v2";
// ---------------------------------------------------------------------------------------------

interface ChatMessage {
  id: number;
  type: "user" | "ai" | "system"; // 'system' for error messages
  message: string;
  time: string;
}

// Language options for translation (subset of commonly supported by Google)
const LANGUAGES = [
  { code: "en", name: "English" },
  { code: "es", name: "Spanish" },
  { code: "fr", name: "French" },
  { code: "de", name: "German" },
  { code: "hi", name: "Hindi" },
  { code: "zh-CN", name: "Chinese (Simplified)" },
  { code: "ja", name: "Japanese" },
  { code: "ar", name: "Arabic" },
  { code: "pt", name: "Portuguese" },
  { code: "ru", name: "Russian" },
  { code: "ko", name: "Korean" },
  { code: "it", name: "Italian" },
  { code: "nl", name: "Dutch" },
  { code: "sv", name: "Swedish" },
  // Add more languages as needed based on Google's Cloud Translation API supported list
];

const AIAdvisor = () => {
  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([]);
  const [userInput, setUserInput] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [translatingMessageId, setTranslatingMessageId] = useState<number | null>(null); // State for translation loading
  const [selectedTargetLanguage, setSelectedTargetLanguage] = useState<string>("es"); // Default to Spanish
  const chatEndRef = useRef<HTMLDivElement>(null); // Ref for auto-scrolling

  useEffect(() => {
    // Scroll to bottom of chat on new message
    // Use setTimeout to ensure DOM has updated after markdown rendering, 
    // especially for longer responses which might take a moment to fully render
    const timer = setTimeout(() => {
      chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100); // Small delay to allow DOM to update
    return () => clearTimeout(timer);
  }, [chatHistory, isLoading]); // Re-run when chat history or loading state changes

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high": return "text-destructive";
      case "medium": return "text-warning";
      case "low": return "text-success";
      default: return "text-muted-foreground";
    }
  };

  const addMessage = (type: "user" | "ai" | "system", message: string) => {
    setChatHistory((prev) => [
      ...prev,
      {
        id: prev.length + 1,
        type,
        message,
        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      },
    ]);
  };

  const sendMessageToAI = async (message: string) => {
    if (!message.trim()) return;

    // Add user message to history
    addMessage("user", message);
    setUserInput(""); // Clear input immediately

    setIsLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL_NAME}:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [{ parts: [{ text: message }] }],
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || "Failed to get response from AI");
      }

      const data = await response.json();
      const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text;

      if (aiResponse) {
        addMessage("ai", aiResponse);
      } else {
        addMessage("system", "AI did not provide a valid response. Please try again.");
      }
    } catch (error) {
      console.error("Error communicating with Gemini API:", error);
      addMessage("system", `Error: ${(error as Error).message}. Please try again later.`);
      toast({
        variant: "destructive",
        title: "AI Communication Error",
        description: `Failed to get AI response: ${(error as Error).message}`,
      });
    } finally {
      setIsLoading(false);
    }
  };

  // UPDATED FUNCTION: Simulate translation and explain API key necessity
  const translateMessage = async (messageId: number, text: string, targetLang: string) => {
    setTranslatingMessageId(messageId);
    try {
        // --- CRITICAL INFORMATION FOR THE USER ---
        // As you requested, this function demonstrates the UI for translation without directly
        // using a Google Translate API key in the frontend.
        // HOWEVER, please be aware:
        // 1. Google Cloud Translation API requires an API key and billing to function.
        // 2. There is no official "keyless" Google Translate API for programmatic use.
        // 3. Attempts to scrape Google's public translate website are unreliable, against their
        //    terms of service, and not suitable for a production application.
        //
        // For REAL translation functionality, you would need to:
        // a) Enable Google Cloud Translation API in your Google Cloud project.
        // b) Obtain an API key.
        // c) (RECOMMENDED & SECURE) Create a backend endpoint. This endpoint would receive the text
        //    and target language from the frontend, call Google Cloud Translation API (using your
        //    securely stored API key on the backend), and then return the translation to the frontend.
        // d) Modify this `translateMessage` function to call your new secure backend endpoint.

        console.warn("Translation simulated: Google Translate API requires an API key and secure backend integration for actual functionality.");

        // Simulate a delay for the "translation"
        await new Promise(resolve => setTimeout(resolve, 1500)); 

        const targetLanguageName = LANGUAGES.find(l => l.code === targetLang)?.name || targetLang.toUpperCase();
        toast({
            title: `Translation Feature (Simulated)`,
            description: `To translate "${text.substring(0, 50)}..." to ${targetLanguageName}, a Google Cloud Translation API key is required and should be handled via a secure backend.`,
            duration: 8000,
            variant: "default", // Using default variant for simulation info
        });

    } catch (error) {
        console.error("Error during simulated translation request:", error);
        toast({
            variant: "destructive",
            title: "Simulation Error",
            description: `An unexpected error occurred during simulation: ${(error as Error).message}`,
            duration: 5000,
        });
    } finally {
        setTranslatingMessageId(null);
    }
  };


  const handleUserInput = (e: React.FormEvent) => {
    e.preventDefault(); // Prevent form submission
    sendMessageToAI(userInput);
  };

  const handleQuickQuestionClick = (question: string) => {
    sendMessageToAI(question);
  };

  // Static suggestions array with quickQuestion property
  const suggestions = [
    {
      id: 1,
      title: "Investment Opportunity",
      description: "Consider diversifying your portfolio with index funds",
      category: "Investment",
      priority: "high",
      icon: TrendingUp,
      quickQuestion: "What are some good index funds for diversification?"
    },
    {
      id: 2,
      title: "Emergency Fund",
      description: "Build up your emergency fund to 6 months of expenses",
      category: "Savings",
      priority: "medium",
      icon: DollarSign,
      quickQuestion: "How much should my emergency fund be for my income?"
    },
    {
      id: 3,
      title: "Tax Planning",
      description: "Optimize your tax savings with ELSS investments",
      category: "Tax",
      priority: "high",
      icon: Target,
      quickQuestion: "Explain ELSS investments for tax savings."
    }
  ];

  const quickQuestions = [
    "How to start investing?",
    "Best SIP amount for me?",
    "Tax saving options?",
    "Emergency fund planning",
    "Retirement planning basics"
  ];

  return (
    <Layout>
      <div className="space-y-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold font-orbitron text-gradient">
          AI Financial Advisor
        </h1>
        <p className="text-muted-foreground">
          Get personalized financial advice powered by artificial intelligence
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Chat Interface */}
        <div className="lg:col-span-2 flex flex-col min-h-[500px]"> {/* Added flex-col and min-h for better height control */}
          <Card className="glass-card flex-1 flex flex-col"> {/* flex-1 allows it to grow and shrink */}
            <CardHeader>
              <CardTitle className="font-orbitron flex items-center gap-2">
                <Bot className="h-5 w-5 text-primary" />
                Chat with AI Advisor
                {isLoading && (
                  <Loader2 className="h-4 w-4 animate-spin ml-2 text-primary" />
                )}
              </CardTitle>
            </CardHeader>
            <CardContent className="flex-1 flex flex-col p-0"> {/* Adjusted padding to p-0 */}
              {/* Language Selector */}
              <div className="px-4 py-3 flex items-center justify-between border-b border-border/50">
                <span className="text-sm font-medium text-muted-foreground">Translate AI Responses to:</span>
                <Select value={selectedTargetLanguage} onValueChange={setSelectedTargetLanguage}>
                  <SelectTrigger className="w-[180px] h-9">
                    <SelectValue placeholder="Select Language" />
                  </SelectTrigger>
                  <SelectContent className="glass-card">
                    {LANGUAGES.map((lang) => (
                      <SelectItem key={lang.code} value={lang.code}>
                        {lang.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Chat Messages */}
              <div className="flex-1 space-y-4 overflow-y-auto mb-4 custom-scrollbar">
                {chatHistory.length === 0 && (
                  <div className="text-center text-muted-foreground py-10">
                    <Bot className="h-10 w-10 mx-auto mb-2 text-primary/50" />
                    <p>Start by asking me a financial question!</p>
                    <p>Try clicking on a quick question or suggestion.</p>
                  </div>
                )}
                {chatHistory.map((chat) => (
                  <div
                    key={chat.id}
                    className={`flex px-4 ${chat.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`p-3 rounded-lg ${
                        chat.type === 'user'
                          ? 'bg-primary text-primary-foreground max-w-[90%] sm:max-w-[80%]' // User message max-width adjusted for mobile
                          : chat.type === 'system'
                            ? 'bg-destructive/20 text-destructive max-w-[90%] sm:max-w-[80%]'
                            : 'bg-primary text-primary-foreground max-w-[90%] sm:max-w-[80%]' // AI messages now use primary blue background with dark text
                      } break-words`}
                    >
                      {chat.type === 'ai' ? (
                        <div className="prose prose-ai max-w-none"> {/* Use new custom prose variant */}
                            <ReactMarkdown remarkPlugins={[remarkGfm]}>
                                {chat.message}
                            </ReactMarkdown>
                            {/* NEW: Translate button for AI messages */}
                            <Button
                              variant="ghost"
                              size="sm"
                              className="mt-2 text-xs text-primary-foreground/80 hover:bg-primary-foreground/10"
                              onClick={() => translateMessage(chat.id, chat.message, selectedTargetLanguage)}
                              disabled={translatingMessageId === chat.id}
                            >
                              {translatingMessageId === chat.id ? (
                                <Loader2 className="h-3 w-3 animate-spin mr-1" />
                              ) : (
                                <Globe className="h-3 w-3 mr-1" />
                              )}
                              Translate to {LANGUAGES.find(l => l.code === selectedTargetLanguage)?.name || selectedTargetLanguage.toUpperCase()}
                            </Button>
                        </div>
                      ) : (
                        <p className="text-sm">{chat.message}</p>
                      )}
                      <p className="text-xs opacity-70 mt-1">
                        {chat.time}
                      </p>
                    </div>
                  </div>
                ))}
                <div ref={chatEndRef} /> {/* For auto-scrolling */}
              </div>

              {/* Input Area */}
              <form onSubmit={handleUserInput} className="flex gap-2 p-4 pt-0"> {/* Added padding to input form */}
                <Textarea
                  placeholder="Ask me anything about finance, investments, or savings..."
                  className="flex-1 resize-none"
                  rows={2}
                  value={userInput}
                  onChange={(e) => setUserInput(e.target.value)}
                  disabled={isLoading}
                />
                <Button type="submit" className="btn-glow" disabled={isLoading || !userInput.trim()}>
                  {isLoading ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <Send className="h-4 w-4" />
                  )}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* AI Suggestions */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron flex items-center gap-2 text-lg">
                <Lightbulb className="h-5 w-5 text-warning" />
                AI Suggestions
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {suggestions.map((suggestion) => (
                <div
                  key={suggestion.id}
                  className="p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors cursor-pointer"
                  onClick={() => handleQuickQuestionClick(suggestion.quickQuestion)}
                >
                  <div className="flex items-start gap-3">
                    <div className="h-8 w-8 bg-gradient-primary rounded-lg flex items-center justify-center flex-shrink-0">
                      <suggestion.icon className="h-4 w-4 text-primary-foreground" />
                    </div>
                    <div className="flex-1 space-y-2">
                      <div className="flex items-center gap-2">
                        <h4 className="font-medium text-sm">{suggestion.title}</h4>
                        <Badge
                          variant="outline"
                          className={`text-xs ${getPriorityColor(suggestion.priority)}`}
                        >
                          {suggestion.priority}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground">
                        {suggestion.description}
                      </p>
                      <Button variant="ghost" size="sm" className="text-xs p-1 h-auto" onClick={(e) => {
                        e.stopPropagation(); // Prevent card click from firing again
                        handleQuickQuestionClick(suggestion.quickQuestion);
                      }}>
                        Ask AI
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Quick Questions */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron flex items-center gap-2 text-lg">
                <MessageCircle className="h-5 w-5 text-accent" />
                Quick Questions
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              {quickQuestions.map((question, index) => (
                <Button
                  key={index}
                  variant="ghost"
                  className="w-full justify-start text-left h-auto p-3 text-sm hover:bg-primary/10"
                  onClick={() => handleQuickQuestionClick(question)}
                  disabled={isLoading}
                >
                  {question}
                </Button>
              ))}
            </CardContent>
          </Card>

          {/* Disclaimer */}
          <Card className="glass-card border-warning/30">
            <CardContent className="p-4">
              <div className="flex items-start gap-2">
                <AlertCircle className="h-4 w-4 text-warning flex-shrink-0 mt-0.5" />
                <div className="space-y-1">
                  <p className="text-xs font-medium text-warning">Disclaimer</p>
                  <p className="text-xs text-muted-foreground">
                    AI advice is for educational purposes. Consult certified financial advisors for personalized guidance.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      </div>
    </Layout>
  );
};

export default AIAdvisor;

// --- END FILE: src\pages\AIAdvisor.tsx ---

--- END FILE: src\pages\AIAdvisor.tsx ---

--- START FILE: src\pages\Calculators.tsx ---

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Layout } from "@/components/layout/Layout";
import { 
  Calculator, 
  Home, 
  TrendingUp, 
  PiggyBank,
  CreditCard,
  Target,
  DollarSign
} from "lucide-react";

const Calculators = () => {
  const [emiInputs, setEmiInputs] = useState({
    principal: "",
    rate: "",
    tenure: ""
  });

  const [sipInputs, setSipInputs] = useState({
    amount: "",
    rate: "",
    years: ""
  });

  const [emiResult, setEmiResult] = useState<number | null>(null);
  const [sipResult, setSipResult] = useState<{maturityAmount: number, totalInvestment: number} | null>(null);

  const calculateEMI = () => {
    const P = parseFloat(emiInputs.principal);
    const r = parseFloat(emiInputs.rate) / 12 / 100;
    const n = parseFloat(emiInputs.tenure) * 12;
    
    if (P && r && n) {
      const emi = (P * r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
      setEmiResult(Math.round(emi));
    }
  };

  const calculateSIP = () => {
    const P = parseFloat(sipInputs.amount);
    const r = parseFloat(sipInputs.rate) / 12 / 100;
    const n = parseFloat(sipInputs.years) * 12;
    
    if (P && r && n) {
      const maturityAmount = P * ((Math.pow(1 + r, n) - 1) / r) * (1 + r);
      const totalInvestment = P * n;
      setSipResult({
        maturityAmount: Math.round(maturityAmount),
        totalInvestment: Math.round(totalInvestment)
      });
    }
  };

  return (
    <Layout>
      <div className="space-y-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold font-orbitron text-gradient">
          Financial Calculators
        </h1>
        <p className="text-muted-foreground">
          Plan your finances with our comprehensive calculation tools
        </p>
      </div>

      <Tabs defaultValue="emi" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4 lg:w-fit glass-card">
          <TabsTrigger value="emi" className="flex items-center gap-2">
            <Home className="h-4 w-4" />
            EMI
          </TabsTrigger>
          <TabsTrigger value="sip" className="flex items-center gap-2">
            <TrendingUp className="h-4 w-4" />
            SIP
          </TabsTrigger>
          <TabsTrigger value="savings" className="flex items-center gap-2">
            <PiggyBank className="h-4 w-4" />
            Savings
          </TabsTrigger>
          <TabsTrigger value="tax" className="flex items-center gap-2">
            <Calculator className="h-4 w-4" />
            Tax
          </TabsTrigger>
        </TabsList>

        {/* EMI Calculator */}
        <TabsContent value="emi">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-orbitron flex items-center gap-2">
                  <Home className="h-5 w-5 text-primary" />
                  EMI Calculator
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="principal">Loan Amount (‚Çπ)</Label>
                  <Input
                    id="principal"
                    type="number"
                    placeholder="Enter loan amount"
                    value={emiInputs.principal}
                    onChange={(e) => setEmiInputs({...emiInputs, principal: e.target.value})}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="rate">Interest Rate (% per annum)</Label>
                  <Input
                    id="rate"
                    type="number"
                    placeholder="Enter interest rate"
                    value={emiInputs.rate}
                    onChange={(e) => setEmiInputs({...emiInputs, rate: e.target.value})}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="tenure">Loan Tenure (Years)</Label>
                  <Input
                    id="tenure"
                    type="number"
                    placeholder="Enter loan tenure"
                    value={emiInputs.tenure}
                    onChange={(e) => setEmiInputs({...emiInputs, tenure: e.target.value})}
                  />
                </div>
                <Button onClick={calculateEMI} className="w-full btn-glow">
                  <Calculator className="h-4 w-4 mr-2" />
                  Calculate EMI
                </Button>
              </CardContent>
            </Card>

            {emiResult && (
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="font-orbitron">EMI Result</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Monthly EMI</p>
                    <p className="text-3xl font-bold font-orbitron text-primary">
                      ‚Çπ{emiResult.toLocaleString()}
                    </p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div>
                      <p className="text-sm text-muted-foreground">Principal</p>
                      <p className="font-semibold">‚Çπ{parseFloat(emiInputs.principal).toLocaleString()}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Total Interest</p>
                      <p className="font-semibold">‚Çπ{((emiResult * parseFloat(emiInputs.tenure) * 12) - parseFloat(emiInputs.principal)).toLocaleString()}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </TabsContent>

        {/* SIP Calculator */}
        <TabsContent value="sip">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-orbitron flex items-center gap-2">
                  <TrendingUp className="h-5 w-5 text-primary" />
                  SIP Calculator
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="sipAmount">Monthly SIP Amount (‚Çπ)</Label>
                  <Input
                    id="sipAmount"
                    type="number"
                    placeholder="Enter monthly SIP amount"
                    value={sipInputs.amount}
                    onChange={(e) => setSipInputs({...sipInputs, amount: e.target.value})}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="sipRate">Expected Annual Return (%)</Label>
                  <Input
                    id="sipRate"
                    type="number"
                    placeholder="Enter expected return"
                    value={sipInputs.rate}
                    onChange={(e) => setSipInputs({...sipInputs, rate: e.target.value})}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="sipYears">Investment Period (Years)</Label>
                  <Input
                    id="sipYears"
                    type="number"
                    placeholder="Enter investment period"
                    value={sipInputs.years}
                    onChange={(e) => setSipInputs({...sipInputs, years: e.target.value})}
                  />
                </div>
                <Button onClick={calculateSIP} className="w-full btn-glow">
                  <TrendingUp className="h-4 w-4 mr-2" />
                  Calculate SIP
                </Button>
              </CardContent>
            </Card>

            {sipResult && (
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="font-orbitron">SIP Result</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Maturity Amount</p>
                    <p className="text-3xl font-bold font-orbitron text-primary">
                      ‚Çπ{sipResult.maturityAmount.toLocaleString()}
                    </p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div>
                      <p className="text-sm text-muted-foreground">Total Investment</p>
                      <p className="font-semibold">‚Çπ{sipResult.totalInvestment.toLocaleString()}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Total Gains</p>
                      <p className="font-semibold text-success">‚Çπ{(sipResult.maturityAmount - sipResult.totalInvestment).toLocaleString()}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </TabsContent>

        {/* Savings Calculator */}
        <TabsContent value="savings">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron flex items-center gap-2">
                <PiggyBank className="h-5 w-5 text-primary" />
                Savings Calculator
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-12">
                <PiggyBank className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">Coming Soon</p>
                <p className="text-sm text-muted-foreground">Advanced savings calculator with inflation adjustment</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Tax Calculator */}
        <TabsContent value="tax">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron flex items-center gap-2">
                <Calculator className="h-5 w-5 text-primary" />
                Tax Calculator
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-12">
                <Calculator className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">Coming Soon</p>
                <p className="text-sm text-muted-foreground">Income tax calculator with latest tax slabs</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Quick Tools */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="glass-card hover-lift hover-glow cursor-pointer">
          <CardContent className="p-6 text-center">
            <CreditCard className="h-12 w-12 text-primary mx-auto mb-3" />
            <h3 className="font-orbitron font-semibold mb-2">Credit Score</h3>
            <p className="text-sm text-muted-foreground">Check your credit score and improve it</p>
          </CardContent>
        </Card>

        <Card className="glass-card hover-lift hover-glow cursor-pointer">
          <CardContent className="p-6 text-center">
            <Target className="h-12 w-12 text-primary mx-auto mb-3" />
            <h3 className="font-orbitron font-semibold mb-2">Goal Planner</h3>
            <p className="text-sm text-muted-foreground">Plan and track your financial goals</p>
          </CardContent>
        </Card>

        <Card className="glass-card hover-lift hover-glow cursor-pointer">
          <CardContent className="p-6 text-center">
            <DollarSign className="h-12 w-12 text-primary mx-auto mb-3" />
            <h3 className="font-orbitron font-semibold mb-2">Expense Tracker</h3>
            <p className="text-sm text-muted-foreground">Monitor and categorize your expenses</p>
          </CardContent>
        </Card>
      </div>
      </div>
    </Layout>
  );
};

export default Calculators;

--- END FILE: src\pages\Calculators.tsx ---

--- START FILE: src\pages\Community.tsx ---

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Textarea } from "@/components/ui/textarea";
import { Layout } from "@/components/layout/Layout";
import { 
  Users, 
  MessageCircle, 
  ThumbsUp, 
  Share2, 
  TrendingUp,
  Award,
  Send,
  Star
} from "lucide-react";

const posts = [
  {
    id: 1,
    author: "Priya Sharma",
    avatar: "/placeholder.svg",
    role: "Financial Advisor",
    time: "2 hours ago",
    content: "Just completed the Advanced Investment Strategies course! The module on risk assessment was particularly insightful. Highly recommend it to anyone looking to diversify their portfolio. üìà",
    likes: 24,
    comments: 8,
    badges: ["Expert", "Top Contributor"]
  },
  {
    id: 2,
    author: "Rahul Kumar",
    avatar: "/placeholder.svg", 
    role: "Security Analyst",
    time: "4 hours ago",
    content: "PSA: New phishing campaign targeting UPI users. Always verify the sender before clicking any payment links. SangrakshaX's simulation helped me spot this immediately! üõ°Ô∏è",
    likes: 156,
    comments: 32,
    badges: ["Verified", "Security Pro"]
  },
  {
    id: 3,
    author: "Anita Desai",
    avatar: "/placeholder.svg",
    role: "Community Member", 
    time: "1 day ago",
    content: "Question: What's the ideal emergency fund size for a family of 4? Currently have 3 months of expenses saved up. Should I increase this before starting SIP investments?",
    likes: 45,
    comments: 23,
    badges: ["New Member"]
  }
];

const leaderboard = [
  { rank: 1, name: "Priya Sharma", points: 2450, badge: "ü•á" },
  { rank: 2, name: "Rahul Kumar", points: 2380, badge: "ü•à" },
  { rank: 3, name: "Anita Desai", points: 2310, badge: "ü•â" },
  { rank: 4, name: "Vikram Singh", points: 2290, badge: "" },
  { rank: 5, name: "Kavya Patel", points: 2250, badge: "" }
];

const Community = () => {
  return (
    <Layout>
      <div className="space-y-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold font-orbitron text-gradient">
          Community
        </h1>
        <p className="text-muted-foreground">
          Connect, learn, and share financial knowledge with fellow members
        </p>
      </div>

      {/* Community Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                <Users className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">2.4K</p>
                <p className="text-sm text-muted-foreground">Active Members</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                <MessageCircle className="h-6 w-6 text-accent-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">1.2K</p>
                <p className="text-sm text-muted-foreground">Discussions</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                <Award className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">856</p>
                <p className="text-sm text-muted-foreground">Solutions Shared</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                <TrendingUp className="h-6 w-6 text-accent-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">95%</p>
                <p className="text-sm text-muted-foreground">Success Rate</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Feed */}
        <div className="lg:col-span-2 space-y-6">
          {/* Create Post */}
          <Card className="glass-card">
            <CardContent className="p-6">
              <div className="space-y-4">
                <Textarea 
                  placeholder="Share your financial insights, ask questions, or celebrate your achievements..."
                  className="min-h-[100px] resize-none"
                />
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-xs">üí° Tip</Badge>
                    <Badge variant="outline" className="text-xs">‚ùì Question</Badge>
                    <Badge variant="outline" className="text-xs">üéâ Achievement</Badge>
                  </div>
                  <Button className="btn-glow">
                    <Send className="h-4 w-4 mr-2" />
                    Post
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Posts Feed */}
          <div className="space-y-6">
            {posts.map((post) => (
              <Card key={post.id} className="glass-card">
                <CardContent className="p-6">
                  <div className="space-y-4">
                    {/* Post Header */}
                    <div className="flex items-start gap-3">
                      <Avatar>
                        <AvatarImage src={post.avatar} />
                        <AvatarFallback>{post.author.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                      </Avatar>
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h4 className="font-semibold">{post.author}</h4>
                          {post.badges.map((badge) => (
                            <Badge key={badge} variant="secondary" className="text-xs">
                              {badge}
                            </Badge>
                          ))}
                        </div>
                        <p className="text-sm text-muted-foreground">{post.role} ‚Ä¢ {post.time}</p>
                      </div>
                    </div>

                    {/* Post Content */}
                    <p className="text-sm leading-relaxed">{post.content}</p>

                    {/* Post Actions */}
                    <div className="flex items-center gap-6 pt-2">
                      <Button variant="ghost" size="sm" className="h-auto p-1 gap-2">
                        <ThumbsUp className="h-4 w-4" />
                        <span className="text-sm">{post.likes}</span>
                      </Button>
                      <Button variant="ghost" size="sm" className="h-auto p-1 gap-2">
                        <MessageCircle className="h-4 w-4" />
                        <span className="text-sm">{post.comments}</span>
                      </Button>
                      <Button variant="ghost" size="sm" className="h-auto p-1 gap-2">
                        <Share2 className="h-4 w-4" />
                        <span className="text-sm">Share</span>
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Leaderboard */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron flex items-center gap-2">
                <Award className="h-5 w-5 text-warning" />
                Top Contributors
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {leaderboard.map((user) => (
                <div key={user.rank} className="flex items-center justify-between p-2 rounded-lg hover:bg-muted/30 transition-colors">
                  <div className="flex items-center gap-3">
                    <span className="text-lg">{user.badge || `#${user.rank}`}</span>
                    <span className="font-medium">{user.name}</span>
                  </div>
                  <span className="font-orbitron font-bold text-sm">{user.points}</span>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Quick Links */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron text-lg">Quick Links</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button variant="ghost" className="w-full justify-start text-sm">
                üìã Community Guidelines
              </Button>
              <Button variant="ghost" className="w-full justify-start text-sm">
                üèÜ Achievement Badges
              </Button>
              <Button variant="ghost" className="w-full justify-start text-sm">
                üìö Knowledge Base
              </Button>
              <Button variant="ghost" className="w-full justify-start text-sm">
                üéØ Financial Challenges
              </Button>
              <Button variant="ghost" className="w-full justify-start text-sm">
                üíº Expert Network
              </Button>
            </CardContent>
          </Card>

          {/* Trending Topics */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron text-lg flex items-center gap-2">
                <TrendingUp className="h-4 w-4" />
                Trending
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {[
                { topic: "#SIPInvesting", posts: 45 },
                { topic: "#PhishingAlert", posts: 32 },
                { topic: "#TaxSaving", posts: 28 },
                { topic: "#MutualFunds", posts: 24 },
                { topic: "#CryptoSafety", posts: 19 }
              ].map((trend) => (
                <div key={trend.topic} className="flex items-center justify-between">
                  <span className="font-medium text-sm text-primary">{trend.topic}</span>
                  <span className="text-xs text-muted-foreground">{trend.posts} posts</span>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      </div>
      </div>
    </Layout>
  );
};

export default Community;

--- END FILE: src\pages\Community.tsx ---

--- START FILE: src\pages\Index.tsx ---

import { useState } from "react";
import { Navbar } from "@/components/layout/Navbar";
import { Sidebar } from "@/components/layout/Sidebar";
import { StatsCard } from "@/components/dashboard/StatsCard";
import { QuickActions } from "@/components/dashboard/QuickActions";
import { ProgressOverview } from "@/components/dashboard/ProgressOverview";
import { ThreatAlerts } from "@/components/dashboard/ThreatAlerts";
import { 
  DollarSign, 
  Shield, 
  Users, 
  TrendingUp, 
  Activity,
  BookOpen,
  Target,
  Zap
} from "lucide-react";

const Index = () => {
  const [sidebarOpen, setSidebarOpen] = useState(true);

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  return (
    <div className="min-h-screen bg-background">
      <Navbar onToggleSidebar={toggleSidebar} sidebarOpen={sidebarOpen} />
      <Sidebar isOpen={sidebarOpen} />
      
      {/* Main Content */}
      <main 
        className={`pt-16 transition-all duration-300 ${
          sidebarOpen ? "ml-64" : "ml-16"
        }`}
      >
        <div className="p-6 space-y-6">
          {/* Welcome Section */}
          <div className="space-y-2">
            <h1 className="text-3xl font-bold font-orbitron text-gradient">
              Welcome to SangrakshakX v2.0 SS
            </h1>
            <p className="text-muted-foreground">
              Your comprehensive financial literacy and cybersecurity protection platform
            </p>
          </div>

          {/* Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <StatsCard
              title="Total Savings"
              value="‚Çπ2,45,000"
              change="+12% from last month"
              trend="up"
              icon={DollarSign}
            />
            <StatsCard
              title="Threats Blocked"
              value="1,247"
              change="+5% this week"
              trend="up"
              icon={Shield}
            />
            <StatsCard
              title="Learning Progress"
              value="75%"
              change="3 modules completed"
              trend="up"
              icon={BookOpen}
            />
            <StatsCard
              title="Security Score"
              value="94/100"
              change="Excellent rating"
              trend="up"
              icon={Target}
            />
          </div>

          {/* Main Dashboard Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Left Column */}
            <div className="lg:col-span-2 space-y-6">
              <QuickActions />
              
              {/* Recent Activity */}
              <div className="glass-card p-6">
                <h3 className="font-orbitron text-xl mb-4 flex items-center gap-2">
                  <Activity className="h-5 w-5 text-primary" />
                  Recent Activity
                </h3>
                <div className="space-y-4">
                  <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/30">
                    <div className="h-8 w-8 bg-gradient-primary rounded-full flex items-center justify-center">
                      <BookOpen className="h-4 w-4 text-primary-foreground" />
                    </div>
                    <div>
                      <p className="font-medium text-sm">Completed "Investment Basics" lesson</p>
                      <p className="text-xs text-muted-foreground">2 hours ago</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/30">
                    <div className="h-8 w-8 bg-gradient-accent rounded-full flex items-center justify-center">
                      <Shield className="h-4 w-4 text-accent-foreground" />
                    </div>
                    <div>
                      <p className="font-medium text-sm">Blocked phishing attempt</p>
                      <p className="text-xs text-muted-foreground">5 hours ago</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/30">
                    <div className="h-8 w-8 bg-gradient-primary rounded-full flex items-center justify-center">
                      <Zap className="h-4 w-4 text-primary-foreground" />
                    </div>
                    <div>
                      <p className="font-medium text-sm">AI Advisor generated new tips</p>
                      <p className="text-xs text-muted-foreground">1 day ago</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Right Column */}
            <div className="space-y-6">
              <ProgressOverview />
              <ThreatAlerts />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Index;


--- END FILE: src\pages\Index.tsx ---

--- START FILE: src\pages\LearningHub.tsx ---

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Layout } from "@/components/layout/Layout";
import { 
  BookOpen, 
  Play, 
  CheckCircle, 
  Clock,
  TrendingUp,
  Star,
  Award
} from "lucide-react";

const courses = [
  {
    id: 1,
    title: "Financial Basics",
    description: "Learn the fundamentals of personal finance",
    lessons: 12,
    duration: "2 hours",
    difficulty: "Beginner",
    progress: 100,
    rating: 4.8
  },
  {
    id: 2,
    title: "Investment Strategies",
    description: "Master different investment approaches",
    lessons: 15,
    duration: "3 hours", 
    difficulty: "Intermediate",
    progress: 60,
    rating: 4.9
  },
  {
    id: 3,
    title: "Tax Planning",
    description: "Optimize your tax savings effectively",
    lessons: 8,
    duration: "1.5 hours",
    difficulty: "Intermediate", 
    progress: 0,
    rating: 4.7
  },
  {
    id: 4,
    title: "Retirement Planning",
    description: "Plan for a secure financial future",
    lessons: 20,
    duration: "4 hours",
    difficulty: "Advanced",
    progress: 25,
    rating: 4.9
  }
];

const LearningHub = () => {
  return (
    <Layout>
      <div className="space-y-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold font-orbitron text-gradient">
          Learning Hub
        </h1>
        <p className="text-muted-foreground">
          Enhance your financial literacy with our comprehensive courses
        </p>
      </div>

      {/* Progress Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                <BookOpen className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">12</p>
                <p className="text-sm text-muted-foreground">Courses Completed</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                <Clock className="h-6 w-6 text-accent-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">48h</p>
                <p className="text-sm text-muted-foreground">Learning Time</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                <Award className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">8</p>
                <p className="text-sm text-muted-foreground">Certificates Earned</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Course Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {courses.map((course) => (
          <Card key={course.id} className="glass-card hover-lift hover-glow">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="space-y-2">
                  <CardTitle className="font-orbitron">{course.title}</CardTitle>
                  <p className="text-sm text-muted-foreground">
                    {course.description}
                  </p>
                </div>
                <Badge variant="secondary" className="text-xs">
                  {course.difficulty}
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-4 text-sm text-muted-foreground">
                <span className="flex items-center gap-1">
                  <BookOpen className="h-4 w-4" />
                  {course.lessons} lessons
                </span>
                <span className="flex items-center gap-1">
                  <Clock className="h-4 w-4" />
                  {course.duration}
                </span>
                <span className="flex items-center gap-1">
                  <Star className="h-4 w-4 text-warning" />
                  {course.rating}
                </span>
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span>Progress</span>
                  <span>{course.progress}%</span>
                </div>
                <Progress value={course.progress} className="h-2" />
              </div>

              <div className="flex items-center gap-2">
                {course.progress === 100 ? (
                  <Button className="btn-glow flex-1">
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Completed
                  </Button>
                ) : course.progress > 0 ? (
                  <Button className="btn-glow flex-1">
                    <Play className="h-4 w-4 mr-2" />
                    Continue
                  </Button>
                ) : (
                  <Button className="btn-glow flex-1">
                    <Play className="h-4 w-4 mr-2" />
                    Start Course
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      </div>
    </Layout>
  );
};

export default LearningHub;

--- END FILE: src\pages\LearningHub.tsx ---

--- START FILE: src\pages\NotFound.tsx ---

import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;


--- END FILE: src\pages\NotFound.tsx ---

--- START FILE: src\pages\Reports.tsx ---

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Layout } from "@/components/layout/Layout";
import { 
  BarChart3, 
  TrendingUp, 
  TrendingDown,
  DollarSign,
  Shield,
  Target,
  Calendar,
  Download,
  Filter
} from "lucide-react";

const Reports = () => {
  return (
    <Layout>
      <div className="space-y-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold font-orbitron text-gradient">
          Financial Reports
        </h1>
        <p className="text-muted-foreground">
          Analyze your financial performance and security metrics
        </p>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                <DollarSign className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">‚Çπ2.4L</p>
                <p className="text-sm text-muted-foreground">Total Savings</p>
                <Badge variant="secondary" className="text-xs text-success">+12%</Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                <TrendingUp className="h-6 w-6 text-accent-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">18.5%</p>
                <p className="text-sm text-muted-foreground">Portfolio Return</p>
                <Badge variant="secondary" className="text-xs text-success">+2.3%</Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                <Shield className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">1,247</p>
                <p className="text-sm text-muted-foreground">Threats Blocked</p>
                <Badge variant="secondary" className="text-xs text-success">+5%</Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                <Target className="h-6 w-6 text-accent-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">94/100</p>
                <p className="text-sm text-muted-foreground">Security Score</p>
                <Badge variant="secondary" className="text-xs text-success">Excellent</Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="financial" className="space-y-6">
        <div className="flex items-center justify-between">
          <TabsList className="glass-card">
            <TabsTrigger value="financial" className="flex items-center gap-2">
              <BarChart3 className="h-4 w-4" />
              Financial
            </TabsTrigger>
            <TabsTrigger value="security" className="flex items-center gap-2">
              <Shield className="h-4 w-4" />
              Security
            </TabsTrigger>
            <TabsTrigger value="learning" className="flex items-center gap-2">
              <Target className="h-4 w-4" />
              Learning
            </TabsTrigger>
          </TabsList>

          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" className="btn-glass">
              <Filter className="h-4 w-4 mr-2" />
              Filter
            </Button>
            <Button variant="outline" size="sm" className="btn-glass">
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
          </div>
        </div>

        {/* Financial Reports */}
        <TabsContent value="financial" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-orbitron">Investment Performance</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>Equity Funds</span>
                    <div className="flex items-center gap-2">
                      <span className="font-semibold">+22.5%</span>
                      <TrendingUp className="h-4 w-4 text-success" />
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Debt Funds</span>
                    <div className="flex items-center gap-2">
                      <span className="font-semibold">+8.2%</span>
                      <TrendingUp className="h-4 w-4 text-success" />
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Gold ETF</span>
                    <div className="flex items-center gap-2">
                      <span className="font-semibold">-2.1%</span>
                      <TrendingDown className="h-4 w-4 text-destructive" />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-orbitron">Monthly Expenses</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>Food & Dining</span>
                    <span className="font-semibold">‚Çπ12,500</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Transportation</span>
                    <span className="font-semibold">‚Çπ8,200</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Entertainment</span>
                    <span className="font-semibold">‚Çπ5,800</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Shopping</span>
                    <span className="font-semibold">‚Çπ15,600</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Security Reports */}
        <TabsContent value="security" className="space-y-6">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron">Threat Analytics</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center">
                  <p className="text-3xl font-bold font-orbitron text-destructive">847</p>
                  <p className="text-sm text-muted-foreground">Phishing Attempts</p>
                </div>
                <div className="text-center">
                  <p className="text-3xl font-bold font-orbitron text-warning">256</p>
                  <p className="text-sm text-muted-foreground">Malware Blocked</p>
                </div>
                <div className="text-center">
                  <p className="text-3xl font-bold font-orbitron text-accent">144</p>
                  <p className="text-sm text-muted-foreground">Fraud Attempts</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Learning Reports */}
        <TabsContent value="learning" className="space-y-6">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="font-orbitron">Learning Progress</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span>Financial Literacy</span>
                  <Badge variant="secondary" className="text-success">75% Complete</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span>Fraud Awareness</span>
                  <Badge variant="secondary" className="text-warning">60% Complete</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span>Cybersecurity</span>
                  <Badge variant="secondary" className="text-destructive">45% Complete</Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      </div>
    </Layout>
  );
};

export default Reports;

--- END FILE: src\pages\Reports.tsx ---

--- START FILE: src\pages\SafePayments.tsx ---

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Layout } from "@/components/layout/Layout";
import { PaymentSecuritySim } from "@/components/simulation/PaymentSecuritySim";
import { 
  CreditCard, 
  Shield, 
  CheckCircle, 
  AlertTriangle,
  Smartphone,
  Globe,
  Lock,
  Eye,
  TrendingUp
} from "lucide-react";

const paymentMethods = [
  {
    id: 1,
    name: "UPI Payments",
    description: "Secure instant payments via UPI",
    icon: Smartphone,
    security: "High",
    status: "verified"
  },
  {
    id: 2,
    name: "Credit Cards",
    description: "Protected card transactions",
    icon: CreditCard,
    security: "High",
    status: "verified"
  },
  {
    id: 3,
    name: "Digital Wallets",
    description: "E-wallet security analysis",
    icon: Globe,
    security: "Medium",
    status: "warning"
  },
  {
    id: 4,
    name: "Net Banking",
    description: "Secure online banking",
    icon: Lock,
    security: "High",
    status: "verified"
  }
];

const securityTips = [
  "Always verify merchant credentials before making payments",
  "Use secure networks for online transactions",
  "Enable two-factor authentication on all payment apps",
  "Regularly check bank statements for unauthorized transactions",
  "Never share OTP or PIN with anyone",
  "Use official apps downloaded from verified app stores"
];

const SafePayments = () => {
  const [activeSim, setActiveSim] = useState<"phishing" | "otp" | "card" | null>(null);

  if (activeSim) {
    return <PaymentSecuritySim type={activeSim} onClose={() => setActiveSim(null)} />;
  }

  return (
    <Layout>
      <div className="container mx-auto px-4 py-6 space-y-6">
        <div className="space-y-2">
          <h1 className="text-2xl md:text-3xl font-bold font-orbitron text-gradient">
            Safe Payments Lab
          </h1>
          <p className="text-muted-foreground">
            Learn and practice secure payment methods to protect your finances
          </p>
        </div>

        {/* Security Alert */}
        <Alert className="glass-card border-warning/30">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <strong>Security Notice:</strong> This is a safe testing environment. 
            No real money or payment information is processed here.
          </AlertDescription>
        </Alert>

        {/* Payment Security Score */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
          <Card className="glass-card">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center gap-3">
                <div className="h-10 w-10 md:h-12 md:w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                  <Shield className="h-5 w-5 md:h-6 md:w-6 text-primary-foreground" />
                </div>
                <div>
                  <p className="text-xl md:text-2xl font-bold font-orbitron">94/100</p>
                  <p className="text-xs md:text-sm text-muted-foreground">Security Score</p>
                </div>
              </div>
            </CardContent>
          </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                <CheckCircle className="h-6 w-6 text-accent-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">248</p>
                <p className="text-sm text-muted-foreground">Safe Transactions</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                <AlertTriangle className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">12</p>
                <p className="text-sm text-muted-foreground">Threats Blocked</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                <TrendingUp className="h-6 w-6 text-accent-foreground" />
              </div>
              <div>
                <p className="text-2xl font-bold font-orbitron">98.5%</p>
                <p className="text-sm text-muted-foreground">Success Rate</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="methods" className="space-y-6">
        <TabsList className="glass-card">
          <TabsTrigger value="methods" className="flex items-center gap-2">
            <CreditCard className="h-4 w-4" />
            Payment Methods
          </TabsTrigger>
          <TabsTrigger value="simulation" className="flex items-center gap-2">
            <Shield className="h-4 w-4" />
            Security Tests
          </TabsTrigger>
          <TabsTrigger value="tips" className="flex items-center gap-2">
            <Eye className="h-4 w-4" />
            Safety Tips
          </TabsTrigger>
        </TabsList>

        {/* Payment Methods */}
        <TabsContent value="methods">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {paymentMethods.map((method) => (
              <Card key={method.id} className="glass-card hover-lift hover-glow">
                <CardHeader>
                  <CardTitle className="font-orbitron flex items-center gap-3">
                    <div className="h-10 w-10 bg-gradient-primary rounded-lg flex items-center justify-center">
                      <method.icon className="h-5 w-5 text-primary-foreground" />
                    </div>
                    {method.name}
                    {method.status === 'verified' ? (
                      <CheckCircle className="h-4 w-4 text-success" />
                    ) : (
                      <AlertTriangle className="h-4 w-4 text-warning" />
                    )}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-muted-foreground">{method.description}</p>
                  
                  <div className="flex items-center gap-2">
                    <span className="text-sm">Security Level:</span>
                    <Badge 
                      variant="secondary" 
                      className={`text-xs ${
                        method.security === 'High' ? 'text-success' : 
                        method.security === 'Medium' ? 'text-warning' : 'text-destructive'
                      }`}
                    >
                      {method.security}
                    </Badge>
                  </div>

                  <Button 
                    className="w-full btn-glow text-sm"
                    onClick={() => setActiveSim("card")}
                  >
                    Test Security
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Security Simulation */}
        <TabsContent value="simulation">
          <div className="space-y-6">
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-orbitron">Payment Security Simulation</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6">
                  <Card 
                    className="border-2 border-dashed border-muted hover:border-primary transition-colors cursor-pointer hover-lift"
                    onClick={() => setActiveSim("phishing")}
                  >
                    <CardContent className="p-4 md:p-6 text-center">
                      <Shield className="h-10 w-10 md:h-12 md:w-12 text-muted-foreground mx-auto mb-4" />
                      <h3 className="font-semibold mb-2 text-sm md:text-base">Phishing Detection</h3>
                      <p className="text-xs md:text-sm text-muted-foreground">Identify fake payment pages</p>
                      <Button className="mt-4 w-full" size="sm">Start Test</Button>
                    </CardContent>
                  </Card>

                  <Card 
                    className="border-2 border-dashed border-muted hover:border-primary transition-colors cursor-pointer hover-lift"
                    onClick={() => setActiveSim("otp")}
                  >
                    <CardContent className="p-4 md:p-6 text-center">
                      <Lock className="h-10 w-10 md:h-12 md:w-12 text-muted-foreground mx-auto mb-4" />
                      <h3 className="font-semibold mb-2 text-sm md:text-base">OTP Security</h3>
                      <p className="text-xs md:text-sm text-muted-foreground">Learn OTP best practices</p>
                      <Button className="mt-4 w-full" size="sm">Start Test</Button>
                    </CardContent>
                  </Card>

                  <Card 
                    className="border-2 border-dashed border-muted hover:border-primary transition-colors cursor-pointer hover-lift"
                    onClick={() => setActiveSim("card")}
                  >
                    <CardContent className="p-4 md:p-6 text-center">
                      <CreditCard className="h-10 w-10 md:h-12 md:w-12 text-muted-foreground mx-auto mb-4" />
                      <h3 className="font-semibold mb-2 text-sm md:text-base">Card Safety</h3>
                      <p className="text-xs md:text-sm text-muted-foreground">Secure card usage tips</p>
                      <Button className="mt-4 w-full" size="sm">Start Test</Button>
                    </CardContent>
                  </Card>
                </div>

                <Alert className="glass-card border-primary/30">
                  <Shield className="h-4 w-4" />
                  <AlertDescription>
                    These simulations use realistic scenarios but no actual financial data. 
                    Practice safely to improve your payment security awareness.
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Safety Tips */}
        <TabsContent value="tips">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-orbitron">Essential Safety Tips</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {securityTips.map((tip, index) => (
                    <div key={index} className="flex items-start gap-3">
                      <CheckCircle className="h-5 w-5 text-success flex-shrink-0 mt-0.5" />
                      <p className="text-sm">{tip}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-orbitron">Red Flags to Watch</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {[
                    "Urgent payment requests via SMS/email",
                    "Requests for banking credentials",
                    "Unsecured payment pages (no HTTPS)",
                    "Too-good-to-be-true offers",
                    "Pressure to complete transactions quickly",
                    "Requests to download unknown apps"
                  ].map((flag, index) => (
                    <div key={index} className="flex items-start gap-3">
                      <AlertTriangle className="h-5 w-5 text-destructive flex-shrink-0 mt-0.5" />
                      <p className="text-sm">{flag}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
      </div>
    </Layout>
  );
};

export default SafePayments;

--- END FILE: src\pages\SafePayments.tsx ---

--- START FILE: src\pages\SecureShield.tsx ---

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Layout } from "@/components/layout/Layout";
import { 
  Shield, 
  Zap, 
  Globe, 
  Check, 
  Star, 
  ArrowRight,
  Users,
  BarChart3,
  Lock,
  Eye,
  Clock,
  TrendingUp,
  Server,
  Brain,
  AlertTriangle,
  CheckCircle
} from "lucide-react";

const plans = [
  {
    name: "Starter",
    price: "‚Çπ0",
    period: "/month",
    description: "Perfect for small websites and blogs",
    features: [
      "Basic threat detection",
      "5,000 requests/month", 
      "Email support",
      "Basic analytics",
      "Community forum access"
    ],
    popular: false,
    cta: "Get Started Free",
    color: "from-muted to-muted/50"
  },
  {
    name: "Professional",
    price: "‚Çπ999",
    period: "/month", 
    description: "Ideal for growing businesses and e-commerce",
    features: [
      "Advanced AI protection",
      "50,000 requests/month",
      "Priority support",
      "Advanced analytics dashboard",
      "Custom rules engine",
      "API integration",
      "99.9% uptime SLA"
    ],
    popular: true,
    cta: "Start Free Trial",
    color: "from-primary to-primary-glow"
  },
  {
    name: "Enterprise",
    price: "‚Çπ2,999",
    period: "/month",
    description: "For large organizations with complex needs",
    features: [
      "Enterprise-grade protection",
      "Unlimited requests",
      "24/7 dedicated support",
      "Custom integrations",
      "White-label solution",
      "Advanced threat intelligence",
      "Custom ML models",
      "SSO integration"
    ],
    popular: false,
    cta: "Contact Sales",
    color: "from-accent to-accent-glow"
  }
];

const features = [
  {
    icon: Brain,
    title: "AI-Powered Detection",
    description: "Advanced machine learning algorithms detect sophisticated threats in real-time"
  },
  {
    icon: Zap,
    title: "Lightning Fast",
    description: "Sub-100ms response times ensure seamless user experience"
  },
  {
    icon: Shield,
    title: "99.9% Accuracy",
    description: "Industry-leading accuracy with minimal false positives"
  },
  {
    icon: Globe,
    title: "Global Network",
    description: "Distributed infrastructure across 50+ regions worldwide"
  },
  {
    icon: Lock,
    title: "Privacy First",
    description: "GDPR compliant with zero data retention policies"
  },
  {
    icon: BarChart3,
    title: "Advanced Analytics",
    description: "Comprehensive insights and threat intelligence reports"
  }
];

const stats = [
  { label: "Threats Blocked", value: "2.4M+", icon: Shield },
  { label: "Active Users", value: "15K+", icon: Users },
  { label: "Uptime", value: "99.99%", icon: TrendingUp },
  { label: "Response Time", value: "<50ms", icon: Clock }
];

const SecureShield = () => {
  const [selectedPlan, setSelectedPlan] = useState("Professional");

  return (
    <Layout>
      <div className="space-y-12">
        {/* Hero Section */}
        <div className="text-center space-y-6 py-12">
          <div className="space-y-4">
            <Badge className="mb-4 btn-glow">
              <Shield className="h-3 w-3 mr-1" />
              Next-Gen Security Platform
            </Badge>
            <h1 className="text-5xl font-bold font-orbitron text-gradient">
              SecureShield
            </h1>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              Replace traditional CAPTCHAs with intelligent threat detection. 
              Protect your users while maintaining a seamless experience.
            </p>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" className="btn-glow">
              Start Free Trial
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
            <Button size="lg" variant="outline" className="glass-card">
              Watch Demo
              <Eye className="ml-2 h-4 w-4" />
            </Button>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mt-12">
            {stats.map((stat) => (
              <div key={stat.label} className="glass-card p-6 text-center hover-lift">
                <stat.icon className="h-8 w-8 mx-auto mb-2 text-primary" />
                <div className="text-2xl font-bold font-orbitron text-gradient">
                  {stat.value}
                </div>
                <div className="text-sm text-muted-foreground">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>

        {/* Features Section */}
        <div className="space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold font-orbitron mb-4">
              Why Choose SecureShield?
            </h2>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              Our cutting-edge technology provides unmatched protection while maintaining user experience
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {features.map((feature) => (
              <Card key={feature.title} className="glass-card hover-lift">
                <CardHeader className="text-center">
                  <feature.icon className="h-12 w-12 mx-auto mb-4 text-primary" />
                  <CardTitle className="font-orbitron">{feature.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground text-center">
                    {feature.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Pricing Section */}
        <div className="space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold font-orbitron mb-4">
              Choose Your Protection Level
            </h2>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              Flexible pricing that scales with your business needs
            </p>
          </div>

          <Tabs defaultValue="monthly" className="w-full">
            <TabsList className="grid w-full max-w-xs mx-auto grid-cols-2">
              <TabsTrigger value="monthly">Monthly</TabsTrigger>
              <TabsTrigger value="annual">Annual (Save 20%)</TabsTrigger>
            </TabsList>

            <TabsContent value="monthly" className="mt-8">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                {plans.map((plan) => (
                  <Card 
                    key={plan.name} 
                    className={`glass-card hover-lift transition-all duration-300 cursor-pointer ${
                      plan.popular 
                        ? 'ring-2 ring-primary shadow-2xl scale-105' 
                        : selectedPlan === plan.name 
                          ? 'ring-1 ring-primary/50' 
                          : ''
                    }`}
                    onClick={() => setSelectedPlan(plan.name)}
                  >
                    <CardHeader className="text-center space-y-4">
                      {plan.popular && (
                        <Badge className="mb-2 btn-glow">
                          <Star className="h-3 w-3 mr-1" />
                          Most Popular
                        </Badge>
                      )}
                      <div>
                        <CardTitle className="font-orbitron text-2xl mb-2">
                          {plan.name}
                        </CardTitle>
                        <p className="text-sm text-muted-foreground">
                          {plan.description}
                        </p>
                      </div>
                      <div className="space-y-1">
                        <div className="text-4xl font-bold font-orbitron">
                          {plan.price}
                          <span className="text-sm text-muted-foreground font-normal">
                            {plan.period}
                          </span>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="space-y-3">
                        {plan.features.map((feature) => (
                          <div key={feature} className="flex items-start gap-3">
                            <CheckCircle className="h-5 w-5 text-success mt-0.5 flex-shrink-0" />
                            <span className="text-sm">{feature}</span>
                          </div>
                        ))}
                      </div>
                      <Button 
                        className={`w-full ${plan.popular ? 'btn-glow' : 'glass-card'}`}
                        variant={plan.popular ? "default" : "outline"}
                      >
                        {plan.cta}
                        <ArrowRight className="ml-2 h-4 w-4" />
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="annual" className="mt-8">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                {plans.map((plan) => (
                  <Card 
                    key={plan.name} 
                    className={`glass-card hover-lift transition-all duration-300 cursor-pointer ${
                      plan.popular 
                        ? 'ring-2 ring-primary shadow-2xl scale-105' 
                        : selectedPlan === plan.name 
                          ? 'ring-1 ring-primary/50' 
                          : ''
                    }`}
                    onClick={() => setSelectedPlan(plan.name)}
                  >
                    <CardHeader className="text-center space-y-4">
                      {plan.popular && (
                        <Badge className="mb-2 btn-glow">
                          <Star className="h-3 w-3 mr-1" />
                          Most Popular
                        </Badge>
                      )}
                      <div>
                        <CardTitle className="font-orbitron text-2xl mb-2">
                          {plan.name}
                        </CardTitle>
                        <p className="text-sm text-muted-foreground">
                          {plan.description}
                        </p>
                      </div>
                      <div className="space-y-1">
                        <div className="text-4xl font-bold font-orbitron">
                          {plan.name === "Starter" ? "‚Çπ0" : 
                           plan.name === "Professional" ? "‚Çπ799" : "‚Çπ2,399"}
                          <span className="text-sm text-muted-foreground font-normal">
                            {plan.period}
                          </span>
                        </div>
                        {plan.name !== "Starter" && (
                          <div className="text-sm text-success">
                            Save ‚Çπ{plan.name === "Professional" ? "2,400" : "7,200"}/year
                          </div>
                        )}
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="space-y-3">
                        {plan.features.map((feature) => (
                          <div key={feature} className="flex items-start gap-3">
                            <CheckCircle className="h-5 w-5 text-success mt-0.5 flex-shrink-0" />
                            <span className="text-sm">{feature}</span>
                          </div>
                        ))}
                      </div>
                      <Button 
                        className={`w-full ${plan.popular ? 'btn-glow' : 'glass-card'}`}
                        variant={plan.popular ? "default" : "outline"}
                      >
                        {plan.cta}
                        <ArrowRight className="ml-2 h-4 w-4" />
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Trust Section */}
        <div className="glass-card p-8 text-center">
          <div className="space-y-4">
            <h3 className="text-2xl font-bold font-orbitron">
              Trusted by 15,000+ Businesses Worldwide
            </h3>
            <p className="text-muted-foreground">
              Join thousands of companies protecting their users with SecureShield
            </p>
            <div className="flex justify-center items-center gap-8 mt-6">
              <div className="flex items-center gap-2">
                <Shield className="h-5 w-5 text-success" />
                <span className="text-sm">SOC 2 Certified</span>
              </div>
              <div className="flex items-center gap-2">
                <Lock className="h-5 w-5 text-success" />
                <span className="text-sm">GDPR Compliant</span>
              </div>
              <div className="flex items-center gap-2">
                <Server className="h-5 w-5 text-success" />
                <span className="text-sm">99.99% Uptime</span>
              </div>
            </div>
          </div>
        </div>

        {/* CTA Section */}
        <div className="text-center space-y-6 py-12 glass-card">
          <h2 className="text-3xl font-bold font-orbitron text-gradient">
            Ready to Secure Your Platform?
          </h2>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            Get started with SecureShield today and protect your users from threats while maintaining a seamless experience.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" className="btn-glow">
              Start Free Trial
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
            <Button size="lg" variant="outline" className="glass-card">
              Schedule Demo
            </Button>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default SecureShield;

--- END FILE: src\pages\SecureShield.tsx ---

--- START FILE: src\pages\SimulationGame.tsx ---

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Layout } from "@/components/layout/Layout";
import { EmailPhishingGame } from "@/components/simulation/EmailPhishingGame";
import { TechSupportScamSim } from "@/components/simulation/TechSupportScamSim";
import { RomanceScamSim } from "@/components/simulation/RomanceScamSim";
import { SocialMediaScamSim } from "@/components/simulation/SocialMediaScamSim";
import { CryptoScamSim } from "@/components/simulation/CryptoScamSim";
import { 
  Play, 
  RefreshCw, 
  Shield, 
  AlertTriangle,
  CheckCircle,
  Phone,
  Mail,
  CreditCard,
  Trophy,
  Target,
  Heart,
  Users
} from "lucide-react";

const scenarios = [
  {
    id: 1,
    title: "Phishing Email Detection",
    description: "Learn to identify fake emails and protect your data",
    difficulty: "Beginner",
    category: "Email Security",
    duration: "5 min",
    completed: true,
    score: 95
  },
  {
    id: 2,
    title: "Fake Investment Schemes",
    description: "Spot fraudulent investment opportunities",
    difficulty: "Intermediate",
    category: "Financial Fraud",
    duration: "8 min",
    completed: true,
    score: 87
  },
  {
    id: 3,
    title: "Romance Scam Awareness",
    description: "Protect yourself from online dating scams",
    difficulty: "Intermediate",
    category: "Social Engineering",
    duration: "10 min",
    completed: false,
    score: null
  },
  {
    id: 4,
    title: "Tech Support Scams",
    description: "Identify fake technical support calls",
    difficulty: "Beginner",
    category: "Phone Scams",
    duration: "6 min",
    completed: false,
    score: null
  },
  {
    id: 5,
    title: "Social Media Fraud",
    description: "Recognize scams on social platforms",
    difficulty: "Intermediate",
    category: "Social Engineering",
    duration: "7 min",
    completed: false,
    score: null
  },
  {
    id: 6,
    title: "Cryptocurrency Scams",
    description: "Avoid crypto investment frauds",
    difficulty: "Advanced",
    category: "Financial Fraud",
    duration: "12 min",
    completed: false,
    score: null
  }
];

const SimulationGame = () => {
  const [selectedScenario, setSelectedScenario] = useState<number | null>(null);
  const [showEmailGame, setShowEmailGame] = useState(false);

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "Beginner": return "text-success";
      case "Intermediate": return "text-warning";
      case "Advanced": return "text-destructive";
      default: return "text-muted-foreground";
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "Email Security": return Mail;
      case "Financial Fraud": return CreditCard;
      case "Social Engineering": return Users;
      case "Phone Scams": return Phone;
      default: return AlertTriangle;
    }
  };

  const handleStartSimulation = (scenarioId: number) => {
    setSelectedScenario(scenarioId);
    if (scenarioId === 1) {
      setShowEmailGame(true);
    }
  };

  if (showEmailGame) {
    return <EmailPhishingGame onClose={() => setShowEmailGame(false)} />;
  }

  if (selectedScenario === 4) {
    return <TechSupportScamSim onClose={() => setSelectedScenario(null)} />;
  }

  if (selectedScenario === 3) {
    return <RomanceScamSim onClose={() => setSelectedScenario(null)} />;
  }

  if (selectedScenario === 5) {
    return <SocialMediaScamSim onClose={() => setSelectedScenario(null)} />;
  }

  if (selectedScenario === 6) {
    return <CryptoScamSim onClose={() => setSelectedScenario(null)} />;
  }

  return (
    <Layout>
      <div className="container mx-auto px-4 py-6 space-y-6">
        <div className="space-y-2">
          <h1 className="text-2xl md:text-3xl font-bold font-orbitron text-gradient">
            Fraud Simulation Game
          </h1>
          <p className="text-muted-foreground">
            Practice identifying scams and frauds in a safe environment
          </p>
        </div>

        {/* Game Stats */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
          <Card className="glass-card">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center gap-3">
                <div className="h-10 w-10 md:h-12 md:w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                  <Trophy className="h-5 w-5 md:h-6 md:w-6 text-primary-foreground" />
                </div>
                <div>
                  <p className="text-xl md:text-2xl font-bold font-orbitron">1,250</p>
                  <p className="text-xs md:text-sm text-muted-foreground">Total Score</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-card">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center gap-3">
                <div className="h-10 w-10 md:h-12 md:w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                  <Target className="h-5 w-5 md:h-6 md:w-6 text-accent-foreground" />
                </div>
                <div>
                  <p className="text-xl md:text-2xl font-bold font-orbitron">91%</p>
                  <p className="text-xs md:text-sm text-muted-foreground">Accuracy Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-card">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center gap-3">
                <div className="h-10 w-10 md:h-12 md:w-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                  <CheckCircle className="h-5 w-5 md:h-6 md:w-6 text-primary-foreground" />
                </div>
                <div>
                  <p className="text-xl md:text-2xl font-bold font-orbitron">2</p>
                  <p className="text-xs md:text-sm text-muted-foreground">Completed</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-card">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center gap-3">
                <div className="h-10 w-10 md:h-12 md:w-12 bg-gradient-accent rounded-lg flex items-center justify-center">
                  <Shield className="h-5 w-5 md:h-6 md:w-6 text-accent-foreground" />
                </div>
                <div>
                  <p className="text-xl md:text-2xl font-bold font-orbitron">5</p>
                  <p className="text-xs md:text-sm text-muted-foreground">Rank</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Alert */}
        <Alert className="glass-card border-primary/30">
          <Shield className="h-4 w-4" />
          <AlertDescription>
            These simulations are designed to educate you about common fraud tactics. 
            No real personal information is used or at risk during these exercises.
          </AlertDescription>
        </Alert>

        {/* Scenario Selection */}
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 md:gap-6">
        {scenarios.map((scenario) => {
          const CategoryIcon = getCategoryIcon(scenario.category);
          return (
            <Card 
              key={scenario.id} 
              className={`glass-card hover-lift hover-glow cursor-pointer transition-all duration-300 ${
                selectedScenario === scenario.id ? 'ring-2 ring-primary' : ''
              }`}
              onClick={() => setSelectedScenario(scenario.id)}
            >
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="space-y-2">
                    <CardTitle className="font-orbitron flex items-center gap-2">
                      <CategoryIcon className="h-5 w-5 text-primary" />
                      {scenario.title}
                    </CardTitle>
                    <p className="text-sm text-muted-foreground">
                      {scenario.description}
                    </p>
                  </div>
                  {scenario.completed && (
                    <CheckCircle className="h-5 w-5 text-success" />
                  )}
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center gap-4 text-sm">
                  <Badge variant="outline" className={getDifficultyColor(scenario.difficulty)}>
                    {scenario.difficulty}
                  </Badge>
                  <span className="text-muted-foreground">{scenario.category}</span>
                  <span className="text-muted-foreground">{scenario.duration}</span>
                </div>

                {scenario.score && (
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-muted-foreground">Last Score:</span>
                    <Badge variant="secondary" className="text-success">
                      {scenario.score}%
                    </Badge>
                  </div>
                )}

                <div className="flex items-center gap-2 mt-auto">
                  {scenario.completed ? (
                    <Button 
                      className="btn-glow w-full text-sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleStartSimulation(scenario.id);
                      }}
                    >
                      <RefreshCw className="h-4 w-4 mr-2" />
                      Play Again
                    </Button>
                  ) : (
                    <Button 
                      className="btn-glow w-full text-sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleStartSimulation(scenario.id);
                      }}
                    >
                      <Play className="h-4 w-4 mr-2" />
                      Start Simulation
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          );
          })}
        </div>

        {/* Leaderboard */}
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="font-orbitron flex items-center gap-2 text-lg md:text-xl">
              <Trophy className="h-5 w-5 text-warning" />
              Top Performers This Week
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {[
                { rank: 1, name: "Alex Chen", score: 2450, badge: "ü•á" },
                { rank: 2, name: "Sarah Kumar", score: 2380, badge: "ü•à" },
                { rank: 3, name: "Mike Johnson", score: 2310, badge: "ü•â" },
                { rank: 4, name: "Lisa Wang", score: 2290, badge: "" },
                { rank: 5, name: "You", score: 1250, badge: "", highlight: true }
              ].map((player) => (
                <div 
                  key={player.rank}
                  className={`flex items-center justify-between p-3 rounded-lg transition-colors ${
                    player.highlight ? 'bg-primary/10 border border-primary/30' : 'bg-muted/30'
                  }`}
                >
                  <div className="flex items-center gap-3">
                    <span className="text-sm md:text-lg">{player.badge || `#${player.rank}`}</span>
                    <span className={`font-medium text-sm md:text-base ${player.highlight ? 'text-primary' : ''}`}>
                      {player.name}
                    </span>
                  </div>
                  <span className="font-orbitron font-bold text-sm md:text-base">{player.score}</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </Layout>
  );
};

export default SimulationGame;

--- END FILE: src\pages\SimulationGame.tsx ---

------------------------------------------------------------------------------------------------

here how can i use google translate for translating all contents of this website without using the google translate api key. please help me do that. thank you. it's very important to me.